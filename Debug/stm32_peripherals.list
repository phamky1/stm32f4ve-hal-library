
stm32_peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          00000108  200000dc  200000dc  000200dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  000200dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eee0  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ac  00000000  00000000  0002efec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a80  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dae  00000000  00000000  00032aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eebe  00000000  00000000  0005584e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9cdf  00000000  00000000  0006470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e3eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035e8  00000000  00000000  0012e43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000dc 	.word	0x200000dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064a4 	.word	0x080064a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e0 	.word	0x200000e0
 80001cc:	080064a4 	.word	0x080064a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <MX_GPIO_Init+0x134>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a45      	ldr	r2, [pc, #276]	; (80006a8 <MX_GPIO_Init+0x134>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <MX_GPIO_Init+0x134>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0310 	and.w	r3, r3, #16
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a3e      	ldr	r2, [pc, #248]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b3c      	ldr	r3, [pc, #240]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b38      	ldr	r3, [pc, #224]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a37      	ldr	r2, [pc, #220]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a30      	ldr	r2, [pc, #192]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_GPIO_Init+0x134>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_GPIO_Init+0x134>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <MX_GPIO_Init+0x134>)
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_GPIO_Init+0x134>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0308 	and.w	r3, r3, #8
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	21c0      	movs	r1, #192	; 0xc0
 800061a:	4824      	ldr	r0, [pc, #144]	; (80006ac <MX_GPIO_Init+0x138>)
 800061c:	f001 f85c 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000620:	2318      	movs	r3, #24
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000624:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	481e      	ldr	r0, [pc, #120]	; (80006b0 <MX_GPIO_Init+0x13c>)
 8000636:	f000 fe9b 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800063e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <MX_GPIO_Init+0x138>)
 8000650:	f000 fe8e 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000654:	23c0      	movs	r3, #192	; 0xc0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4810      	ldr	r0, [pc, #64]	; (80006ac <MX_GPIO_Init+0x138>)
 800066c:	f000 fe80 	bl	8001370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2006      	movs	r0, #6
 8000676:	f000 fdb2 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800067a:	2006      	movs	r0, #6
 800067c:	f000 fdcb 	bl	8001216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2009      	movs	r0, #9
 8000686:	f000 fdaa 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800068a:	2009      	movs	r0, #9
 800068c:	f000 fdc3 	bl	8001216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fda2 	bl	80011de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fdbb 	bl	8001216 <HAL_NVIC_EnableIRQ>

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40021000 	.word	0x40021000

080006b4 <button_callback>:
/* USER CODE BEGIN 0 */
uint8_t buffer[6];

static const char* TAG = "APP_MAIN";

void button_callback(void *user, int pin, btn_ev_t event) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	4613      	mov	r3, r2
 80006c0:	71fb      	strb	r3, [r7, #7]
	if (event == BUTTON_EVENT_PRESS) {
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d118      	bne.n	80006fa <button_callback+0x46>
		STM_LOGI(TAG, "BUTTON_EVENT_PRESS [%d]", pin);
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <button_callback+0xbc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d94b      	bls.n	8000768 <button_callback+0xb4>
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <button_callback+0xc0>)
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	bf00      	nop
 80006d6:	f000 fc77 	bl	8000fc8 <HAL_GetTick>
 80006da:	6138      	str	r0, [r7, #16]
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <button_callback+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	6979      	ldr	r1, [r7, #20]
 80006e4:	4825      	ldr	r0, [pc, #148]	; (800077c <button_callback+0xc8>)
 80006e6:	f004 fef1 	bl	80054cc <iprintf>
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	4824      	ldr	r0, [pc, #144]	; (8000780 <button_callback+0xcc>)
 80006ee:	f004 feed 	bl	80054cc <iprintf>
 80006f2:	200a      	movs	r0, #10
 80006f4:	f004 ff02 	bl	80054fc <putchar>
	} else if (event == BUTTON_EVENT_LONG_PRESS) {
		STM_LOGI(TAG, "BUTTON_EVENT_LONG_PRESS [%d]", pin);
	} else if (event == BUTTON_EVENT_DOUBLE_PRESS) {
		STM_LOGI(TAG, "BUTTON_EVENT_DOUBLE_PRESS [%d]", pin);
	}
}
 80006f8:	e036      	b.n	8000768 <button_callback+0xb4>
	} else if (event == BUTTON_EVENT_LONG_PRESS) {
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d118      	bne.n	8000732 <button_callback+0x7e>
		STM_LOGI(TAG, "BUTTON_EVENT_LONG_PRESS [%d]", pin);
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <button_callback+0xbc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d92f      	bls.n	8000768 <button_callback+0xb4>
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <button_callback+0xc0>)
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	bf00      	nop
 800070e:	f000 fc5b 	bl	8000fc8 <HAL_GetTick>
 8000712:	61b8      	str	r0, [r7, #24]
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <button_callback+0xc4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	69ba      	ldr	r2, [r7, #24]
 800071a:	69f9      	ldr	r1, [r7, #28]
 800071c:	4817      	ldr	r0, [pc, #92]	; (800077c <button_callback+0xc8>)
 800071e:	f004 fed5 	bl	80054cc <iprintf>
 8000722:	68b9      	ldr	r1, [r7, #8]
 8000724:	4817      	ldr	r0, [pc, #92]	; (8000784 <button_callback+0xd0>)
 8000726:	f004 fed1 	bl	80054cc <iprintf>
 800072a:	200a      	movs	r0, #10
 800072c:	f004 fee6 	bl	80054fc <putchar>
}
 8000730:	e01a      	b.n	8000768 <button_callback+0xb4>
	} else if (event == BUTTON_EVENT_DOUBLE_PRESS) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d117      	bne.n	8000768 <button_callback+0xb4>
		STM_LOGI(TAG, "BUTTON_EVENT_DOUBLE_PRESS [%d]", pin);
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <button_callback+0xbc>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d913      	bls.n	8000768 <button_callback+0xb4>
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <button_callback+0xc0>)
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
 8000744:	bf00      	nop
 8000746:	f000 fc3f 	bl	8000fc8 <HAL_GetTick>
 800074a:	6238      	str	r0, [r7, #32]
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <button_callback+0xc4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6a3a      	ldr	r2, [r7, #32]
 8000752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <button_callback+0xc8>)
 8000756:	f004 feb9 	bl	80054cc <iprintf>
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	480a      	ldr	r0, [pc, #40]	; (8000788 <button_callback+0xd4>)
 800075e:	f004 feb5 	bl	80054cc <iprintf>
 8000762:	200a      	movs	r0, #10
 8000764:	f004 feca 	bl	80054fc <putchar>
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200001d4 	.word	0x200001d4
 8000774:	080064c8 	.word	0x080064c8
 8000778:	20000000 	.word	0x20000000
 800077c:	080064cc 	.word	0x080064cc
 8000780:	080064e0 	.word	0x080064e0
 8000784:	080064f8 	.word	0x080064f8
 8000788:	08006518 	.word	0x08006518

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fbb3 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f85f 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f7ff feeb 	bl	8000574 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800079e:	f000 fb09 	bl	8000db4 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 80007a2:	f000 f951 	bl	8000a48 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  STM_Logging_Init(&huart1, STM_LOG_LEVEL_INFO);
 80007a6:	2103      	movs	r1, #3
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <main+0xb4>)
 80007aa:	f004 fe47 	bl	800543c <STM_Logging_Init>
  HAL_UART_Receive_IT(&huart1, buffer, 6);
 80007ae:	2206      	movs	r2, #6
 80007b0:	4924      	ldr	r1, [pc, #144]	; (8000844 <main+0xb8>)
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <main+0xb4>)
 80007b4:	f002 fe3c 	bl	8003430 <HAL_UART_Receive_IT>
  btn_manage_cfg_t btn_cfg = {
 80007b8:	4a23      	ldr	r2, [pc, #140]	; (8000848 <main+0xbc>)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  .long_press_timeout = 2000,
	  .multi_press = 5,
	  .num_btns = 3,
	  .press_timeout = 200,
  };
  btn_manage_init(&btn_cfg);
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fdad 	bl	8005328 <btn_manage_init>
  btn_register_event_callback(button_callback, NULL);
 80007ce:	2100      	movs	r1, #0
 80007d0:	481e      	ldr	r0, [pc, #120]	; (800084c <main+0xc0>)
 80007d2:	f004 fcb3 	bl	800513c <btn_register_event_callback>
  btn_manage_add_new_button(GPIO_PIN_0, BUTTON_EVENT_PRESS | BUTTON_EVENT_DOUBLE_PRESS | BUTTON_EVENT_LONG_PRESS);
 80007d6:	210e      	movs	r1, #14
 80007d8:	2001      	movs	r0, #1
 80007da:	f004 fced 	bl	80051b8 <btn_manage_add_new_button>
  btn_manage_add_new_button(GPIO_PIN_3, BUTTON_EVENT_PRESS | BUTTON_EVENT_DOUBLE_PRESS | BUTTON_EVENT_LONG_PRESS);
 80007de:	210e      	movs	r1, #14
 80007e0:	2008      	movs	r0, #8
 80007e2:	f004 fce9 	bl	80051b8 <btn_manage_add_new_button>
  btn_manage_add_new_button(GPIO_PIN_4, BUTTON_EVENT_PRESS | BUTTON_EVENT_DOUBLE_PRESS | BUTTON_EVENT_LONG_PRESS);
 80007e6:	210e      	movs	r1, #14
 80007e8:	2010      	movs	r0, #16
 80007ea:	f004 fce5 	bl	80051b8 <btn_manage_add_new_button>
  HAL_SD_CardInfoTypeDef CardInfo;
  HAL_SD_GetCardInfo(&hsd, &CardInfo);
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <main+0xc4>)
 80007f4:	f002 f856 	bl	80028a4 <HAL_SD_GetCardInfo>
//  STM_LOGI(TAG, "Card Info :BlockNbr %ld", CardInfo.BlockNbr);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <main+0xc8>)
 80007fe:	f000 ff6b 	bl	80016d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <main+0xc8>)
 8000808:	f000 ff66 	bl	80016d8 <HAL_GPIO_WritePin>

  uint32_t running_tick = HAL_GetTick();
 800080c:	f000 fbdc 	bl	8000fc8 <HAL_GetTick>
 8000810:	62f8      	str	r0, [r7, #44]	; 0x2c
  while (1)
  {
	  if (HAL_GetTick() - running_tick > 5000) {
 8000812:	f000 fbd9 	bl	8000fc8 <HAL_GetTick>
 8000816:	4602      	mov	r2, r0
 8000818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000820:	4293      	cmp	r3, r2
 8000822:	d90a      	bls.n	800083a <main+0xae>
		  running_tick = HAL_GetTick();
 8000824:	f000 fbd0 	bl	8000fc8 <HAL_GetTick>
 8000828:	62f8      	str	r0, [r7, #44]	; 0x2c
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4809      	ldr	r0, [pc, #36]	; (8000854 <main+0xc8>)
 800082e:	f000 ff6c 	bl	800170a <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <main+0xc8>)
 8000836:	f000 ff68 	bl	800170a <HAL_GPIO_TogglePin>
	  }
	  btn_manage_process();
 800083a:	f004 fc27 	bl	800508c <btn_manage_process>
	  if (HAL_GetTick() - running_tick > 5000) {
 800083e:	e7e8      	b.n	8000812 <main+0x86>
 8000840:	20000188 	.word	0x20000188
 8000844:	200000f8 	.word	0x200000f8
 8000848:	08006538 	.word	0x08006538
 800084c:	080006b5 	.word	0x080006b5
 8000850:	20000100 	.word	0x20000100
 8000854:	40020000 	.word	0x40020000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fe28 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008cc:	23a8      	movs	r3, #168	; 0xa8
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 ff47 	bl	8001770 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f886 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2105      	movs	r1, #5
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f9a8 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f86f 	bl	80009f8 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_UART_RxCpltCallback+0x34>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d10a      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x2a>
		 HAL_UART_Transmit(&huart1, buffer, 6, 100);
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	2206      	movs	r2, #6
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <HAL_UART_RxCpltCallback+0x38>)
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <HAL_UART_RxCpltCallback+0x34>)
 8000948:	f002 fce0 	bl	800330c <HAL_UART_Transmit>
		 HAL_UART_Receive_IT(&huart1, buffer, 6);
 800094c:	2206      	movs	r2, #6
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <HAL_UART_RxCpltCallback+0x38>)
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <HAL_UART_RxCpltCallback+0x34>)
 8000952:	f002 fd6d 	bl	8003430 <HAL_UART_Receive_IT>
	}
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000188 	.word	0x20000188
 8000964:	200000f8 	.word	0x200000f8

08000968 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2b10      	cmp	r3, #16
 8000976:	d110      	bne.n	800099a <HAL_GPIO_EXTI_Callback+0x32>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0){
 8000978:	2110      	movs	r1, #16
 800097a:	481d      	ldr	r0, [pc, #116]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x88>)
 800097c:	f000 fe94 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <HAL_GPIO_EXTI_Callback+0x28>
			btn_manage_update_state(GPIO_PIN_4, BUTTON_STATE_RISING);
 8000986:	2101      	movs	r1, #1
 8000988:	2010      	movs	r0, #16
 800098a:	f004 fab7 	bl	8004efc <btn_manage_update_state>
			btn_manage_update_state(GPIO_PIN_0, BUTTON_STATE_RISING);
		} else {
			btn_manage_update_state(GPIO_PIN_0, BUTTON_STATE_FAILLING);
		}
	}
}
 800098e:	e02b      	b.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
			btn_manage_update_state(GPIO_PIN_4, BUTTON_STATE_FAILLING);
 8000990:	2102      	movs	r1, #2
 8000992:	2010      	movs	r0, #16
 8000994:	f004 fab2 	bl	8004efc <btn_manage_update_state>
}
 8000998:	e026      	b.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (GPIO_Pin == GPIO_PIN_3) {
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d110      	bne.n	80009c2 <HAL_GPIO_EXTI_Callback+0x5a>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == 0){
 80009a0:	2108      	movs	r1, #8
 80009a2:	4813      	ldr	r0, [pc, #76]	; (80009f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80009a4:	f000 fe80 	bl	80016a8 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d104      	bne.n	80009b8 <HAL_GPIO_EXTI_Callback+0x50>
			btn_manage_update_state(GPIO_PIN_3, BUTTON_STATE_RISING);
 80009ae:	2101      	movs	r1, #1
 80009b0:	2008      	movs	r0, #8
 80009b2:	f004 faa3 	bl	8004efc <btn_manage_update_state>
}
 80009b6:	e017      	b.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
			btn_manage_update_state(GPIO_PIN_3, BUTTON_STATE_FAILLING);
 80009b8:	2102      	movs	r1, #2
 80009ba:	2008      	movs	r0, #8
 80009bc:	f004 fa9e 	bl	8004efc <btn_manage_update_state>
}
 80009c0:	e012      	b.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
	} else if (GPIO_Pin == GPIO_PIN_0) {
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10f      	bne.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0){
 80009c8:	2101      	movs	r1, #1
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80009cc:	f000 fe6c 	bl	80016a8 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d104      	bne.n	80009e0 <HAL_GPIO_EXTI_Callback+0x78>
			btn_manage_update_state(GPIO_PIN_0, BUTTON_STATE_RISING);
 80009d6:	2101      	movs	r1, #1
 80009d8:	2001      	movs	r0, #1
 80009da:	f004 fa8f 	bl	8004efc <btn_manage_update_state>
}
 80009de:	e003      	b.n	80009e8 <HAL_GPIO_EXTI_Callback+0x80>
			btn_manage_update_state(GPIO_PIN_0, BUTTON_STATE_FAILLING);
 80009e0:	2102      	movs	r1, #2
 80009e2:	2001      	movs	r0, #1
 80009e4:	f004 fa8a 	bl	8004efc <btn_manage_update_state>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020000 	.word	0x40020000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  STM_LOGE(TAG, "ERROR -----[]----- ");
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <Error_Handler+0x3c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d012      	beq.n	8000a2c <Error_Handler+0x34>
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <Error_Handler+0x40>)
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	bf00      	nop
 8000a0c:	f000 fadc 	bl	8000fc8 <HAL_GetTick>
 8000a10:	6038      	str	r0, [r7, #0]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <Error_Handler+0x44>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <Error_Handler+0x48>)
 8000a1c:	f004 fd56 	bl	80054cc <iprintf>
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <Error_Handler+0x4c>)
 8000a22:	f004 fd53 	bl	80054cc <iprintf>
 8000a26:	200a      	movs	r0, #10
 8000a28:	f004 fd68 	bl	80054fc <putchar>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x38>
 8000a32:	bf00      	nop
 8000a34:	200001d4 	.word	0x200001d4
 8000a38:	08006544 	.word	0x08006544
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	080064cc 	.word	0x080064cc
 8000a44:	08006548 	.word	0x08006548

08000a48 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_SDIO_SD_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a6a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000a78:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a7a:	f001 fb11 	bl	80020a0 <HAL_SD_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_SDIO_SD_Init+0x40>
  {
    Error_Handler();
 8000a84:	f7ff ffb8 	bl	80009f8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_SDIO_SD_Init+0x58>)
 8000a8e:	f001 ff35 	bl	80028fc <HAL_SD_ConfigWideBusOperation>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SDIO_SD_Init+0x54>
  {
    Error_Handler();
 8000a98:	f7ff ffae 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000100 	.word	0x20000100
 8000aa4:	40012c00 	.word	0x40012c00

08000aa8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2c      	ldr	r2, [pc, #176]	; (8000b78 <HAL_SD_MspInit+0xd0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d152      	bne.n	8000b70 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_SD_MspInit+0xd4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b30:	230c      	movs	r3, #12
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <HAL_SD_MspInit+0xd8>)
 8000b3c:	f000 fc18 	bl	8001370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b40:	2304      	movs	r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b50:	230c      	movs	r3, #12
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <HAL_SD_MspInit+0xdc>)
 8000b5c:	f000 fc08 	bl	8001370 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2031      	movs	r0, #49	; 0x31
 8000b66:	f000 fb3a 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000b6a:	2031      	movs	r0, #49	; 0x31
 8000b6c:	f000 fb53 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40012c00 	.word	0x40012c00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f9bc 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f000 fd85 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c3e:	2008      	movs	r0, #8
 8000c40:	f000 fd7e 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f000 fd77 	bl	8001740 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USART1_IRQHandler+0x10>)
 8000c5e:	f002 fc17 	bl	8003490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000188 	.word	0x20000188

08000c6c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <SDIO_IRQHandler+0x10>)
 8000c72:	f001 fac5 	bl	8002200 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000100 	.word	0x20000100

08000c80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	4601      	mov	r1, r0
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <_read+0x12>
  }

  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f004 fb88 	bl	8005468 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000184 	.word	0x20000184
 8000d8c:	200001e8 	.word	0x200001e8

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_USART1_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART1_UART_Init+0x4c>)
 8000dec:	f002 fa41 	bl	8003272 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f7ff fdff 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000188 	.word	0x20000188
 8000e04:	40011000 	.word	0x40011000

08000e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_UART_MspInit+0x94>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d134      	bne.n	8000e94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_UART_MspInit+0x98>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e74:	2307      	movs	r3, #7
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_UART_MspInit+0x9c>)
 8000e80:	f000 fa76 	bl	8001370 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2025      	movs	r0, #37	; 0x25
 8000e8a:	f000 f9a8 	bl	80011de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e8e:	2025      	movs	r0, #37	; 0x25
 8000e90:	f000 f9c1 	bl	8001216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eae:	490e      	ldr	r1, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed2:	f7ff ff5d 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f004 facd 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fc57 	bl	800078c <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000eec:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8000ef0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000ef4:	200001e4 	.word	0x200001e4

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f94f 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	200f      	movs	r0, #15
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe2a 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f967 	bl	8001232 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f92f 	bl	80011de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	200001cc 	.word	0x200001cc

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001cc 	.word	0x200001cc

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff29 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff3e 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff31 	bl	800108c <__NVIC_EnableIRQ>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffa2 	bl	8001184 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff feb6 	bl	8000fc8 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d008      	beq.n	800127c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e052      	b.n	8001322 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0216 	bic.w	r2, r2, #22
 800128a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800129a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <HAL_DMA_Abort+0x62>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012cc:	e013      	b.n	80012f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ce:	f7ff fe7b 	bl	8000fc8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d90c      	bls.n	80012f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2220      	movs	r2, #32
 80012e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2203      	movs	r2, #3
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e015      	b.n	8001322 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e4      	bne.n	80012ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	223f      	movs	r2, #63	; 0x3f
 800130a:	409a      	lsls	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d004      	beq.n	8001348 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e00c      	b.n	8001362 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2205      	movs	r2, #5
 800134c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	e16b      	b.n	8001664 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800138c:	2201      	movs	r2, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	f040 815a 	bne.w	800165e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d005      	beq.n	80013c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d130      	bne.n	8001424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80b4 	beq.w	800165e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b60      	ldr	r3, [pc, #384]	; (800167c <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a5f      	ldr	r2, [pc, #380]	; (800167c <HAL_GPIO_Init+0x30c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_GPIO_Init+0x30c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001512:	4a5b      	ldr	r2, [pc, #364]	; (8001680 <HAL_GPIO_Init+0x310>)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_GPIO_Init+0x314>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d02b      	beq.n	8001596 <HAL_GPIO_Init+0x226>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a51      	ldr	r2, [pc, #324]	; (8001688 <HAL_GPIO_Init+0x318>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d025      	beq.n	8001592 <HAL_GPIO_Init+0x222>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a50      	ldr	r2, [pc, #320]	; (800168c <HAL_GPIO_Init+0x31c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d01f      	beq.n	800158e <HAL_GPIO_Init+0x21e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4f      	ldr	r2, [pc, #316]	; (8001690 <HAL_GPIO_Init+0x320>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d019      	beq.n	800158a <HAL_GPIO_Init+0x21a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_GPIO_Init+0x324>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0x216>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4d      	ldr	r2, [pc, #308]	; (8001698 <HAL_GPIO_Init+0x328>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x212>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x32c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_GPIO_Init+0x330>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x20a>
 8001576:	2307      	movs	r3, #7
 8001578:	e00e      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800157a:	2308      	movs	r3, #8
 800157c:	e00c      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800157e:	2306      	movs	r3, #6
 8001580:	e00a      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001586:	2304      	movs	r3, #4
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x228>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x228>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x310>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <HAL_GPIO_Init+0x334>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_GPIO_Init+0x334>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_GPIO_Init+0x334>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_GPIO_Init+0x334>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_GPIO_Init+0x334>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_GPIO_Init+0x334>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_GPIO_Init+0x334>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f ae90 	bls.w	800138c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171c:	887a      	ldrh	r2, [r7, #2]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	041a      	lsls	r2, r3, #16
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43d9      	mvns	r1, r3
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	400b      	ands	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800174c:	695a      	ldr	r2, [r3, #20]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f902 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013c00 	.word	0x40013c00

08001770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e267      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d00c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d112      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a6:	4b82      	ldr	r3, [pc, #520]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05b      	beq.n	8001878 <HAL_RCC_OscConfig+0x108>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d157      	bne.n	8001878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e242      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x74>
 80017d6:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a75      	ldr	r2, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6c      	ldr	r2, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a68      	ldr	r2, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fbce 	bl	8000fc8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fbca 	bl	8000fc8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e207      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xc0>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fbba 	bl	8000fc8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fbb6 	bl	8000fc8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e1f3      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0xe8>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d063      	beq.n	800194e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001886:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189e:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e1c7      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e03a      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff fb6f 	bl	8000fc8 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff fb6b 	bl	8000fc8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1a8      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4925      	ldr	r1, [pc, #148]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 800191c:	4313      	orrs	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x244>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb4e 	bl	8000fc8 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fb4a 	bl	8000fc8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e187      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d036      	beq.n	80019c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d016      	beq.n	8001990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fb2e 	bl	8000fc8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001970:	f7ff fb2a 	bl	8000fc8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e167      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x240>)
 8001984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x200>
 800198e:	e01b      	b.n	80019c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_RCC_OscConfig+0x248>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb17 	bl	8000fc8 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	e00e      	b.n	80019bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff fb13 	bl	8000fc8 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d907      	bls.n	80019bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e150      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470000 	.word	0x42470000
 80019b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ea      	bne.n	800199e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8097 	beq.w	8001b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	4b7d      	ldr	r3, [pc, #500]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a7c      	ldr	r2, [pc, #496]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b7a      	ldr	r3, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d118      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	4b74      	ldr	r3, [pc, #464]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a73      	ldr	r2, [pc, #460]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fad3 	bl	8000fc8 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff facf 	bl	8000fc8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e10c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b6a      	ldr	r3, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x474>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2ea>
 8001a4c:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x30c>
 8001a62:	4b5f      	ldr	r3, [pc, #380]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a5e      	ldr	r2, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6e:	4b5c      	ldr	r3, [pc, #368]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0x324>
 8001a7c:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6713      	str	r3, [r2, #112]	; 0x70
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f023 0304 	bic.w	r3, r3, #4
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa94 	bl	8000fc8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fa90 	bl	8000fc8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0cb      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ee      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x334>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac8:	f7ff fa7e 	bl	8000fc8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fa7a 	bl	8000fc8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0b5      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ee      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a1 	beq.w	8001c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d05c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d141      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fa4e 	bl	8000fc8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fa4a 	bl	8000fc8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e087      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	491b      	ldr	r1, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fa23 	bl	8000fc8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff fa1f 	bl	8000fc8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e05c      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x416>
 8001ba4:	e054      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x478>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa0c 	bl	8000fc8 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff fa08 	bl	8000fc8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e045      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x444>
 8001bd2:	e03d      	b.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e038      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x4ec>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d028      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d11a      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0cc      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d90c      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b65      	ldr	r3, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d044      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e067      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff f93a 	bl	8000fc8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f936 	bl	8000fc8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d20c      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	490a      	ldr	r1, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	5ccb      	ldrb	r3, [r1, r3]
 8001dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f89a 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08006640 	.word	0x08006640
 8001e24:	20000004 	.word	0x20000004
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e30:	b094      	sub	sp, #80	; 0x50
 8001e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
 8001e38:	2300      	movs	r3, #0
 8001e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e44:	4b79      	ldr	r3, [pc, #484]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d00d      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x40>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	f200 80e1 	bhi.w	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x34>
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e5e:	e0db      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e64:	e0db      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e6a:	e0d8      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e76:	4b6d      	ldr	r3, [pc, #436]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e82:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e9e:	4622      	mov	r2, r4
 8001ea0:	462b      	mov	r3, r5
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	1a51      	subs	r1, r2, r1
 8001eba:	6139      	str	r1, [r7, #16]
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed0:	4659      	mov	r1, fp
 8001ed2:	018b      	lsls	r3, r1, #6
 8001ed4:	4651      	mov	r1, sl
 8001ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eda:	4651      	mov	r1, sl
 8001edc:	018a      	lsls	r2, r1, #6
 8001ede:	4651      	mov	r1, sl
 8001ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001efe:	4690      	mov	r8, r2
 8001f00:	4699      	mov	r9, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	eb18 0303 	adds.w	r3, r8, r3
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	462b      	mov	r3, r5
 8001f0c:	eb49 0303 	adc.w	r3, r9, r3
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f1e:	4629      	mov	r1, r5
 8001f20:	024b      	lsls	r3, r1, #9
 8001f22:	4621      	mov	r1, r4
 8001f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f28:	4621      	mov	r1, r4
 8001f2a:	024a      	lsls	r2, r1, #9
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f32:	2200      	movs	r2, #0
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f3c:	f7fe f998 	bl	8000270 <__aeabi_uldivmod>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4613      	mov	r3, r2
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f48:	e058      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4a:	4b38      	ldr	r3, [pc, #224]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	2200      	movs	r2, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	4611      	mov	r1, r2
 8001f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f64:	4642      	mov	r2, r8
 8001f66:	464b      	mov	r3, r9
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f76:	0150      	lsls	r0, r2, #5
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f82:	4649      	mov	r1, r9
 8001f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	00eb      	lsls	r3, r5, #3
 8001fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fb2:	00e2      	lsls	r2, r4, #3
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4643      	mov	r3, r8
 8001fba:	18e3      	adds	r3, r4, r3
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	464b      	mov	r3, r9
 8001fc0:	eb45 0303 	adc.w	r3, r5, r3
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	028b      	lsls	r3, r1, #10
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fdc:	4621      	mov	r1, r4
 8001fde:	028a      	lsls	r2, r1, #10
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	61fa      	str	r2, [r7, #28]
 8001fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff0:	f7fe f93e 	bl	8000270 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c1b      	lsrs	r3, r3, #16
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	3301      	adds	r3, #1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800200c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800200e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_RCC_GetSysClockFreq+0x204>)
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002020:	4618      	mov	r0, r3
 8002022:	3750      	adds	r7, #80	; 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	00f42400 	.word	0x00f42400
 8002034:	007a1200 	.word	0x007a1200

08002038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_GetHCLKFreq+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff0 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08006650 	.word	0x08006650

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffdc 	bl	8002038 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0b5b      	lsrs	r3, r3, #13
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40023800 	.word	0x40023800
 800209c:	08006650 	.word	0x08006650

080020a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e022      	b.n	80020f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe fcef 	bl	8000aa8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f814 	bl	8002100 <HAL_SD_InitCard>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00a      	b.n	80020f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b08e      	sub	sp, #56	; 0x38
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800211c:	2376      	movs	r3, #118	; 0x76
 800211e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681d      	ldr	r5, [r3, #0]
 8002124:	466c      	mov	r4, sp
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800212e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002138:	4628      	mov	r0, r5
 800213a:	f002 f911 	bl	8004360 <SDIO_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e04f      	b.n	80021f0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_SD_InitCard+0xf8>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 f949 	bl	80043f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_SD_InitCard+0xf8>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002166:	2002      	movs	r0, #2
 8002168:	f7fe ff3a 	bl	8000fe0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fdbb 	bl	8002ce8 <SD_PowerON>
 8002172:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e02e      	b.n	80021f0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fcda 	bl	8002b4c <SD_InitCard>
 8002198:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e01b      	b.n	80021f0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 f9a8 	bl	8004516 <SDMMC_CmdBlockLength>
 80021c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00f      	beq.n	80021ee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_SD_InitCard+0xfc>)
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bdb0      	pop	{r4, r5, r7, pc}
 80021f8:	422580a0 	.word	0x422580a0
 80021fc:	004005ff 	.word	0x004005ff

08002200 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_SD_IRQHandler+0x2e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 ff7d 	bl	8003126 <SD_Read_IT>
 800222c:	e165      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 808f 	beq.w	800235c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002246:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002256:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800225a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d039      	beq.n	80022ea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_SD_IRQHandler+0x8a>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d011      	beq.n	80022ae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f964 	bl	800455c <SDMMC_CmdStopTransfer>
 8002294:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f943 	bl	8002534 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <HAL_SD_IRQHandler+0xda>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f920 	bl	8002520 <HAL_SD_RxCpltCallback>
 80022e0:	e10b      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f912 	bl	800250c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022e8:	e107      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8102 	beq.w	80024fa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d011      	beq.n	8002324 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 f929 	bl	800455c <SDMMC_CmdStopTransfer>
 800230a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f908 	bl	8002534 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 80e5 	bne.w	80024fa <HAL_SD_IRQHandler+0x2fa>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 80df 	bne.w	80024fa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0208 	bic.w	r2, r2, #8
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f8d9 	bl	800250c <HAL_SD_TxCpltCallback>
}
 800235a:	e0ce      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_SD_IRQHandler+0x17c>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 ff27 	bl	80031c8 <SD_Write_IT>
 800237a:	e0be      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002382:	f240 233a 	movw	r3, #570	; 0x23a
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b6 	beq.w	80024fa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	f043 0202 	orr.w	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	f043 0208 	orr.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	f043 0208 	orr.w	r2, r3, #8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f240 723a 	movw	r2, #1850	; 0x73a
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 f892 	bl	800455c <SDMMC_CmdStopTransfer>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f869 	bl	8002534 <HAL_SD_ErrorCallback>
}
 8002462:	e04a      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d045      	beq.n	80024fa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <HAL_SD_IRQHandler+0x282>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d011      	beq.n	80024a6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_SD_IRQHandler+0x304>)
 8002488:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe ff4b 	bl	800132a <HAL_DMA_Abort_IT>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02f      	beq.n	80024fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fae6 	bl	8002a70 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80024a4:	e029      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_SD_IRQHandler+0x2ba>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d011      	beq.n	80024de <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_SD_IRQHandler+0x308>)
 80024c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe ff2f 	bl	800132a <HAL_DMA_Abort_IT>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d013      	beq.n	80024fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb01 	bl	8002ade <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80024dc:	e00d      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f828 	bl	8002548 <HAL_SD_AbortCallback>
}
 80024f8:	e7ff      	b.n	80024fa <HAL_SD_IRQHandler+0x2fa>
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	08002a71 	.word	0x08002a71
 8002508:	08002adf 	.word	0x08002adf

0800250c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256a:	0f9b      	lsrs	r3, r3, #30
 800256c:	b2da      	uxtb	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002588:	0e1b      	lsrs	r3, r3, #24
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	b2da      	uxtb	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025bc:	0d1b      	lsrs	r3, r3, #20
 80025be:	b29a      	uxth	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025da:	0bdb      	lsrs	r3, r3, #15
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ec:	0b9b      	lsrs	r3, r3, #14
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002610:	0b1b      	lsrs	r3, r3, #12
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	2b00      	cmp	r3, #0
 800262a:	d163      	bne.n	80026f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800263c:	0f92      	lsrs	r2, r2, #30
 800263e:	431a      	orrs	r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002648:	0edb      	lsrs	r3, r3, #27
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	b2da      	uxtb	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	0e1b      	lsrs	r3, r3, #24
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	b2da      	uxtb	r2, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266c:	0d5b      	lsrs	r3, r3, #21
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	b2da      	uxtb	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	0c9b      	lsrs	r3, r3, #18
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	b2da      	uxtb	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002690:	0bdb      	lsrs	r3, r3, #15
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	b2da      	uxtb	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	7e1b      	ldrb	r3, [r3, #24]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	3302      	adds	r3, #2
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7a1b      	ldrb	r3, [r3, #8]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	2201      	movs	r2, #1
 80026d2:	409a      	lsls	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026e0:	0a52      	lsrs	r2, r2, #9
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
 80026f2:	e031      	b.n	8002758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d11d      	bne.n	8002738 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	3301      	adds	r3, #1
 8002718:	029a      	lsls	r2, r3, #10
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	661a      	str	r2, [r3, #96]	; 0x60
 8002736:	e00f      	b.n	8002758 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_SD_GetCardCSD+0x344>)
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e09d      	b.n	8002894 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275c:	0b9b      	lsrs	r3, r3, #14
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276e:	09db      	lsrs	r3, r3, #7
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002776:	b2da      	uxtb	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002786:	b2da      	uxtb	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	0fdb      	lsrs	r3, r3, #31
 8002792:	b2da      	uxtb	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	0f5b      	lsrs	r3, r3, #29
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	0d9b      	lsrs	r3, r3, #22
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	0d5b      	lsrs	r3, r3, #21
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	0bdb      	lsrs	r3, r3, #15
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	0b9b      	lsrs	r3, r3, #14
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	0b5b      	lsrs	r3, r3, #13
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	0b1b      	lsrs	r3, r3, #12
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002882:	b2da      	uxtb	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	004005ff 	.word	0x004005ff

080028a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af04      	add	r7, sp, #16
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2203      	movs	r2, #3
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	2b03      	cmp	r3, #3
 800291a:	d02e      	beq.n	800297a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d106      	bne.n	8002932 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
 8002930:	e029      	b.n	8002986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002938:	d10a      	bne.n	8002950 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa8a 	bl	8002e54 <SD_WideBus_Enable>
 8002940:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
 800294e:	e01a      	b.n	8002986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fac7 	bl	8002eea <SD_WideBus_Disable>
 800295c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
 800296a:	e00c      	b.n	8002986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
 8002978:	e005      	b.n	8002986 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a26      	ldr	r2, [pc, #152]	; (8002a2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029a4:	e01f      	b.n	80029e6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681d      	ldr	r5, [r3, #0]
 80029cc:	466c      	mov	r4, sp
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e0:	4628      	mov	r0, r5
 80029e2:	f001 fcbd 	bl	8004360 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fd91 	bl	8004516 <SDMMC_CmdBlockLength>
 80029f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00c      	beq.n	8002a16 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	004005ff 	.word	0x004005ff

08002a30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9de 	bl	8002e04 <SD_SendStatus>
 8002a48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0a5b      	lsrs	r3, r3, #9
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff ffd1 	bl	8002a30 <HAL_SD_GetCardState>
 8002a8e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d002      	beq.n	8002aaa <SD_DMATxAbort+0x3a>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10a      	bne.n	8002ac0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fd54 	bl	800455c <SDMMC_CmdStopTransfer>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fd3d 	bl	8002548 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002ace:	e002      	b.n	8002ad6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff fd2f 	bl	8002534 <HAL_SD_ErrorCallback>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f240 523a 	movw	r2, #1338	; 0x53a
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff ff9a 	bl	8002a30 <HAL_SD_GetCardState>
 8002afc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d002      	beq.n	8002b18 <SD_DMARxAbort+0x3a>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d10a      	bne.n	8002b2e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 fd1d 	bl	800455c <SDMMC_CmdStopTransfer>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff fd06 	bl	8002548 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8002b3c:	e002      	b.n	8002b44 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff fcf8 	bl	8002534 <HAL_SD_ErrorCallback>
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	b094      	sub	sp, #80	; 0x50
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002b54:	2301      	movs	r3, #1
 8002b56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fc56 	bl	800440e <SDIO_GetPowerState>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b6c:	e0b8      	b.n	8002ce0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d02f      	beq.n	8002bd6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fdf8 	bl	8004770 <SDMMC_CmdSendCID>
 8002b80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <SD_InitCard+0x40>
    {
      return errorstate;
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	e0a9      	b.n	8002ce0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fc80 	bl	8004498 <SDIO_GetResponse>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2104      	movs	r1, #4
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fc77 	bl	8004498 <SDIO_GetResponse>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 fc6e 	bl	8004498 <SDIO_GetResponse>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	210c      	movs	r1, #12
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fc65 	bl	8004498 <SDIO_GetResponse>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d00d      	beq.n	8002bfa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f107 020e 	add.w	r2, r7, #14
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fdfe 	bl	80047ea <SDMMC_CmdSetRelAdd>
 8002bee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <SD_InitCard+0xae>
    {
      return errorstate;
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	e072      	b.n	8002ce0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d036      	beq.n	8002c70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f001 fdc8 	bl	80047ac <SDMMC_CmdSendCSD>
 8002c1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	e05b      	b.n	8002ce0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 fc32 	bl	8004498 <SDIO_GetResponse>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2104      	movs	r1, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fc29 	bl	8004498 <SDIO_GetResponse>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2108      	movs	r1, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fc20 	bl	8004498 <SDIO_GetResponse>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	210c      	movs	r1, #12
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fc17 	bl	8004498 <SDIO_GetResponse>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2104      	movs	r1, #4
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fc0e 	bl	8004498 <SDIO_GetResponse>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	0d1a      	lsrs	r2, r3, #20
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fc66 	bl	800255c <HAL_SD_GetCardCSD>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c9a:	e021      	b.n	8002ce0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	461c      	mov	r4, r3
 8002caa:	4615      	mov	r5, r2
 8002cac:	4622      	mov	r2, r4
 8002cae:	462b      	mov	r3, r5
 8002cb0:	4608      	mov	r0, r1
 8002cb2:	f001 fc75 	bl	80045a0 <SDMMC_CmdSelDesel>
 8002cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <SD_InitCard+0x176>
  {
    return errorstate;
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc0:	e00e      	b.n	8002ce0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681d      	ldr	r5, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	466c      	mov	r4, sp
 8002cca:	f103 0210 	add.w	r2, r3, #16
 8002cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f001 fb41 	bl	8004360 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3740      	adds	r7, #64	; 0x40
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bdb0      	pop	{r4, r5, r7, pc}

08002ce8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fc70 	bl	80045e6 <SDMMC_CmdGoIdleState>
 8002d06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	e072      	b.n	8002df8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fc83 	bl	8004622 <SDMMC_CmdOperCond>
 8002d1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fc59 	bl	80045e6 <SDMMC_CmdGoIdleState>
 8002d34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	e05b      	b.n	8002df8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d137      	bne.n	8002dbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fc83 	bl	8004660 <SDMMC_CmdAppCommand>
 8002d5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d02d      	beq.n	8002dbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d66:	e047      	b.n	8002df8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fc76 	bl	8004660 <SDMMC_CmdAppCommand>
 8002d74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SD_PowerON+0x98>
    {
      return errorstate;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	e03b      	b.n	8002df8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	491e      	ldr	r1, [pc, #120]	; (8002e00 <SD_PowerON+0x118>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fc8c 	bl	80046a4 <SDMMC_CmdAppOperCommand>
 8002d8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002d94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d98:	e02e      	b.n	8002df8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fb79 	bl	8004498 <SDIO_GetResponse>
 8002da6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	0fdb      	lsrs	r3, r3, #31
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <SD_PowerON+0xcc>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <SD_PowerON+0xce>
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]

    count++;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d802      	bhi.n	8002dce <SD_PowerON+0xe6>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0cc      	beq.n	8002d68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d902      	bls.n	8002dde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	e00c      	b.n	8002df8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44
 8002dee:	e002      	b.n	8002df6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	c1100000 	.word	0xc1100000

08002e04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e18:	e018      	b.n	8002e4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f001 fd00 	bl	800482c <SDMMC_CmdSendStatus>
 8002e2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	e009      	b.n	8002e4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fb2a 	bl	8004498 <SDIO_GetResponse>
 8002e44:	4602      	mov	r2, r0
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fb14 	bl	8004498 <SDIO_GetResponse>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e7a:	d102      	bne.n	8002e82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e80:	e02f      	b.n	8002ee2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f879 	bl	8002f80 <SD_FindSCR>
 8002e8e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	e023      	b.n	8002ee2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01c      	beq.n	8002ede <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f001 fbd5 	bl	8004660 <SDMMC_CmdAppCommand>
 8002eb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	e00f      	b.n	8002ee2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fc0e 	bl	80046ea <SDMMC_CmdBusWidth>
 8002ece:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	e003      	b.n	8002ee2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e001      	b.n	8002ee2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ede:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fac9 	bl	8004498 <SDIO_GetResponse>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f10:	d102      	bne.n	8002f18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f16:	e02f      	b.n	8002f78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f82e 	bl	8002f80 <SD_FindSCR>
 8002f24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	e023      	b.n	8002f78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01c      	beq.n	8002f74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f001 fb8a 	bl	8004660 <SDMMC_CmdAppCommand>
 8002f4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	e00f      	b.n	8002f78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 fbc3 	bl	80046ea <SDMMC_CmdBusWidth>
 8002f64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	e003      	b.n	8002f78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e001      	b.n	8002f78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002f74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b08f      	sub	sp, #60	; 0x3c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002f8a:	f7fe f81d 	bl	8000fc8 <HAL_GetTick>
 8002f8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fab5 	bl	8004516 <SDMMC_CmdBlockLength>
 8002fac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	e0b2      	b.n	800311e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f001 fb4b 	bl	8004660 <SDMMC_CmdAppCommand>
 8002fca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	e0a3      	b.n	800311e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002fe0:	2330      	movs	r3, #48	; 0x30
 8002fe2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f107 0210 	add.w	r2, r7, #16
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f001 fa5f 	bl	80044be <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fb92 	bl	800472e <SDMMC_CmdSendSCR>
 800300a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02a      	beq.n	8003068 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	e083      	b.n	800311e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	f107 0208 	add.w	r2, r7, #8
 8003030:	18d4      	adds	r4, r2, r3
 8003032:	4608      	mov	r0, r1
 8003034:	f001 f9bf 	bl	80043b6 <SDIO_ReadFIFO>
 8003038:	4603      	mov	r3, r0
 800303a:	6023      	str	r3, [r4, #0]
      index++;
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	3301      	adds	r3, #1
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
 8003042:	e006      	b.n	8003052 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003052:	f7fd ffb9 	bl	8000fc8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d102      	bne.n	8003068 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003062:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003066:	e05a      	b.n	800311e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0cf      	beq.n	8003016 <SD_FindSCR+0x96>
 8003076:	e000      	b.n	800307a <SD_FindSCR+0xfa>
      break;
 8003078:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003090:	2308      	movs	r3, #8
 8003092:	e044      	b.n	800311e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e037      	b.n	800311e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e02a      	b.n	800311e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	061a      	lsls	r2, r3, #24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80030e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	0e1b      	lsrs	r3, r3, #24
 80030ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	601a      	str	r2, [r3, #0]
    scr++;
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	3304      	adds	r3, #4
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	061a      	lsls	r2, r3, #24
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003106:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003110:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	0e1b      	lsrs	r3, r3, #24
 8003116:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	373c      	adds	r7, #60	; 0x3c
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}

08003126 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03f      	beq.n	80031c0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e033      	b.n	80031ae <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f001 f933 	bl	80043b6 <SDIO_ReadFIFO>
 8003150:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]
      tmp++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3b01      	subs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3b01      	subs	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3b01      	subs	r3, #1
 8003190:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3301      	adds	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b07      	cmp	r3, #7
 80031b2:	d9c8      	bls.n	8003146 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80031c0:	bf00      	nop
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d043      	beq.n	800326a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e037      	b.n	8003258 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	021a      	lsls	r2, r3, #8
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3b01      	subs	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3b01      	subs	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	061a      	lsls	r2, r3, #24
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
 8003234:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3b01      	subs	r3, #1
 8003240:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f8bf 	bl	80043d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d9c4      	bls.n	80031e8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e03f      	b.n	8003304 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd fdb5 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2224      	movs	r2, #36	; 0x24
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fdde 	bl	8003e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d17c      	bne.n	8003426 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Transmit+0x2c>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e075      	b.n	8003428 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x3e>
 8003346:	2302      	movs	r3, #2
 8003348:	e06e      	b.n	8003428 <HAL_UART_Transmit+0x11c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2221      	movs	r2, #33	; 0x21
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003360:	f7fd fe32 	bl	8000fc8 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d108      	bne.n	800338e <HAL_UART_Transmit+0x82>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e003      	b.n	8003396 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800339e:	e02a      	b.n	80033f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fb1e 	bl	80039ec <UART_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e036      	b.n	8003428 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	3302      	adds	r3, #2
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e007      	b.n	80033e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3301      	adds	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1cf      	bne.n	80033a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	2140      	movs	r1, #64	; 0x40
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 faee 	bl	80039ec <UART_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e006      	b.n	8003428 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d11d      	bne.n	8003486 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_UART_Receive_IT+0x26>
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e016      	b.n	8003488 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_UART_Receive_IT+0x38>
 8003464:	2302      	movs	r3, #2
 8003466:	e00f      	b.n	8003488 <HAL_UART_Receive_IT+0x58>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	461a      	mov	r2, r3
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fb23 	bl	8003ac8 <UART_Start_Receive_IT>
 8003482:	4603      	mov	r3, r0
 8003484:	e000      	b.n	8003488 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	; 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_UART_IRQHandler+0x66>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fc07 	bl	8003d02 <UART_Receive_IT>
      return;
 80034f4:	e256      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80de 	beq.w	80036bc <HAL_UART_IRQHandler+0x22c>
 8003500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80d1 	beq.w	80036bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xae>
 8003526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xd2>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0xf6>
 800356e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0204 	orr.w	r2, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d011      	beq.n	80035b6 <HAL_UART_IRQHandler+0x126>
 8003592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0208 	orr.w	r2, r3, #8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 81ed 	beq.w	800399a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x14e>
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb92 	bl	8003d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_UART_IRQHandler+0x17a>
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04f      	beq.n	80036aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fa9a 	bl	8003b44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d141      	bne.n	80036a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3314      	adds	r3, #20
 8003624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800364a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800364e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1d9      	bne.n	800361e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	2b00      	cmp	r3, #0
 8003670:	d013      	beq.n	800369a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4a7d      	ldr	r2, [pc, #500]	; (800386c <HAL_UART_IRQHandler+0x3dc>)
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fe53 	bl	800132a <HAL_DMA_Abort_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003694:	4610      	mov	r0, r2
 8003696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00e      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f990 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e00a      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f98c 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e006      	b.n	80036b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f988 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036b6:	e170      	b.n	800399a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	bf00      	nop
    return;
 80036ba:	e16e      	b.n	800399a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	f040 814a 	bne.w	800395a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8143 	beq.w	800395a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 813c 	beq.w	800395a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	f040 80b4 	bne.w	8003870 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8140 	beq.w	800399e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003726:	429a      	cmp	r2, r3
 8003728:	f080 8139 	bcs.w	800399e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003732:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	f000 8088 	beq.w	8003852 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800376e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1d9      	bne.n	8003742 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800379e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e1      	bne.n	800378e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3314      	adds	r3, #20
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e3      	bne.n	80037ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003834:	65ba      	str	r2, [r7, #88]	; 0x58
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800383a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e3      	bne.n	8003810 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fcfc 	bl	800124a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800385a:	b29b      	uxth	r3, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	b29b      	uxth	r3, r3
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f8b6 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003868:	e099      	b.n	800399e <HAL_UART_IRQHandler+0x50e>
 800386a:	bf00      	nop
 800386c:	08003c0b 	.word	0x08003c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 808b 	beq.w	80039a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800388c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8086 	beq.w	80039a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ba:	647a      	str	r2, [r7, #68]	; 0x44
 80038bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e3      	bne.n	8003896 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	623b      	str	r3, [r7, #32]
   return(result);
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038f2:	633a      	str	r2, [r7, #48]	; 0x30
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	330c      	adds	r3, #12
 800391a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	60fb      	str	r3, [r7, #12]
   return(result);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003938:	61fa      	str	r2, [r7, #28]
 800393a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	617b      	str	r3, [r7, #20]
   return(result);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e3      	bne.n	8003914 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800394c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f83e 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003958:	e023      	b.n	80039a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_UART_IRQHandler+0x4ea>
 8003966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f95d 	bl	8003c32 <UART_Transmit_IT>
    return;
 8003978:	e014      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <HAL_UART_IRQHandler+0x514>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f99d 	bl	8003cd2 <UART_EndTransmit_IT>
    return;
 8003998:	e004      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
    return;
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
      return;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_UART_IRQHandler+0x514>
      return;
 80039a2:	bf00      	nop
  }
}
 80039a4:	37e8      	adds	r7, #232	; 0xe8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop

080039ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b090      	sub	sp, #64	; 0x40
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fc:	e050      	b.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d04c      	beq.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a0c:	f7fd fadc 	bl	8000fc8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d241      	bcs.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a70:	623a      	str	r2, [r7, #32]
 8003a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	69f9      	ldr	r1, [r7, #28]
 8003a76:	6a3a      	ldr	r2, [r7, #32]
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e5      	bne.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e00f      	b.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d09f      	beq.n	80039fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3740      	adds	r7, #64	; 0x40
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2222      	movs	r2, #34	; 0x22
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0220 	orr.w	r2, r2, #32
 8003b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b095      	sub	sp, #84	; 0x54
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b6c:	643a      	str	r2, [r7, #64]	; 0x40
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d119      	bne.n	8003bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e853 3f00 	ldrex	r3, [r3]
 8003bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f023 0310 	bic.w	r3, r3, #16
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bdc:	61ba      	str	r2, [r7, #24]
 8003bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be0:	6979      	ldr	r1, [r7, #20]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	e841 2300 	strex	r3, r2, [r1]
 8003be8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bfe:	bf00      	nop
 8003c00:	3754      	adds	r7, #84	; 0x54
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff fecb 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b21      	cmp	r3, #33	; 0x21
 8003c44:	d13e      	bne.n	8003cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d114      	bne.n	8003c7a <UART_Transmit_IT+0x48>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d110      	bne.n	8003c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]
 8003c78:	e008      	b.n	8003c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6211      	str	r1, [r2, #32]
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10f      	bne.n	8003cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fe5a 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08c      	sub	sp, #48	; 0x30
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b22      	cmp	r3, #34	; 0x22
 8003d14:	f040 80ab 	bne.w	8003e6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d117      	bne.n	8003d52 <UART_Receive_IT+0x50>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d113      	bne.n	8003d52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d50:	e026      	b.n	8003da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d64:	d007      	beq.n	8003d76 <UART_Receive_IT+0x74>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <UART_Receive_IT+0x82>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d106      	bne.n	8003d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e008      	b.n	8003d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4619      	mov	r1, r3
 8003dae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d15a      	bne.n	8003e6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0220 	bic.w	r2, r2, #32
 8003dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d135      	bne.n	8003e60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	623a      	str	r2, [r7, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	69f9      	ldr	r1, [r7, #28]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d10a      	bne.n	8003e52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fdbb 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
 8003e5e:	e002      	b.n	8003e66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fc fd63 	bl	800092c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e002      	b.n	8003e70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3730      	adds	r7, #48	; 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e7c:	b0c0      	sub	sp, #256	; 0x100
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ed0:	f021 010c 	bic.w	r1, r1, #12
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	6999      	ldr	r1, [r3, #24]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	ea40 0301 	orr.w	r3, r0, r1
 8003efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <UART_SetConfig+0x2cc>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d005      	beq.n	8003f18 <UART_SetConfig+0xa0>
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <UART_SetConfig+0x2d0>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d104      	bne.n	8003f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe f8ae 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f20:	e003      	b.n	8003f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f22:	f7fe f895 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003f26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	f040 810c 	bne.w	8004150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	1891      	adds	r1, r2, r2
 8003f50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f52:	415b      	adcs	r3, r3
 8003f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	eb12 0801 	adds.w	r8, r2, r1
 8003f60:	4629      	mov	r1, r5
 8003f62:	eb43 0901 	adc.w	r9, r3, r1
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7a:	4690      	mov	r8, r2
 8003f7c:	4699      	mov	r9, r3
 8003f7e:	4623      	mov	r3, r4
 8003f80:	eb18 0303 	adds.w	r3, r8, r3
 8003f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f88:	462b      	mov	r3, r5
 8003f8a:	eb49 0303 	adc.w	r3, r9, r3
 8003f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	18db      	adds	r3, r3, r3
 8003faa:	653b      	str	r3, [r7, #80]	; 0x50
 8003fac:	4613      	mov	r3, r2
 8003fae:	eb42 0303 	adc.w	r3, r2, r3
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fbc:	f7fc f958 	bl	8000270 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <UART_SetConfig+0x2d4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800400c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004010:	4692      	mov	sl, r2
 8004012:	469b      	mov	fp, r3
 8004014:	4643      	mov	r3, r8
 8004016:	eb1a 0303 	adds.w	r3, sl, r3
 800401a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800401e:	464b      	mov	r3, r9
 8004020:	eb4b 0303 	adc.w	r3, fp, r3
 8004024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004034:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800403c:	460b      	mov	r3, r1
 800403e:	18db      	adds	r3, r3, r3
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
 8004042:	4613      	mov	r3, r2
 8004044:	eb42 0303 	adc.w	r3, r2, r3
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
 800404a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800404e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004052:	f7fc f90d 	bl	8000270 <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4611      	mov	r1, r2
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <UART_SetConfig+0x2d4>)
 800405e:	fba3 2301 	umull	r2, r3, r3, r1
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2264      	movs	r2, #100	; 0x64
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	1acb      	subs	r3, r1, r3
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <UART_SetConfig+0x2d4>)
 8004074:	fba3 2302 	umull	r2, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004080:	441c      	add	r4, r3
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800408c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	63b9      	str	r1, [r7, #56]	; 0x38
 800409c:	415b      	adcs	r3, r3
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6339      	str	r1, [r7, #48]	; 0x30
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040f8:	460b      	mov	r3, r1
 80040fa:	18db      	adds	r3, r3, r3
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fe:	4613      	mov	r3, r2
 8004100:	eb42 0303 	adc.w	r3, r2, r3
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800410a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800410e:	f7fc f8af 	bl	8000270 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <UART_SetConfig+0x2d4>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <UART_SetConfig+0x2d4>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 0207 	and.w	r2, r3, #7
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4422      	add	r2, r4
 800413e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004140:	e105      	b.n	800434e <UART_SetConfig+0x4d6>
 8004142:	bf00      	nop
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004154:	2200      	movs	r2, #0
 8004156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800415a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800415e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004162:	4642      	mov	r2, r8
 8004164:	464b      	mov	r3, r9
 8004166:	1891      	adds	r1, r2, r2
 8004168:	6239      	str	r1, [r7, #32]
 800416a:	415b      	adcs	r3, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004172:	4641      	mov	r1, r8
 8004174:	1854      	adds	r4, r2, r1
 8004176:	4649      	mov	r1, r9
 8004178:	eb43 0501 	adc.w	r5, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004198:	464b      	mov	r3, r9
 800419a:	eb45 0303 	adc.w	r3, r5, r3
 800419e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041be:	4629      	mov	r1, r5
 80041c0:	008b      	lsls	r3, r1, #2
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041c8:	4621      	mov	r1, r4
 80041ca:	008a      	lsls	r2, r1, #2
 80041cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041d0:	f7fc f84e 	bl	8000270 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4b60      	ldr	r3, [pc, #384]	; (800435c <UART_SetConfig+0x4e4>)
 80041da:	fba3 2302 	umull	r2, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	011c      	lsls	r4, r3, #4
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	61b9      	str	r1, [r7, #24]
 80041fc:	415b      	adcs	r3, r3
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004204:	4641      	mov	r1, r8
 8004206:	1851      	adds	r1, r2, r1
 8004208:	6139      	str	r1, [r7, #16]
 800420a:	4649      	mov	r1, r9
 800420c:	414b      	adcs	r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	00cb      	lsls	r3, r1, #3
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004226:	4651      	mov	r1, sl
 8004228:	00ca      	lsls	r2, r1, #3
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	4603      	mov	r3, r0
 8004230:	4642      	mov	r2, r8
 8004232:	189b      	adds	r3, r3, r2
 8004234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004238:	464b      	mov	r3, r9
 800423a:	460a      	mov	r2, r1
 800423c:	eb42 0303 	adc.w	r3, r2, r3
 8004240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	67bb      	str	r3, [r7, #120]	; 0x78
 800424e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800425c:	4649      	mov	r1, r9
 800425e:	008b      	lsls	r3, r1, #2
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004266:	4641      	mov	r1, r8
 8004268:	008a      	lsls	r2, r1, #2
 800426a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800426e:	f7fb ffff 	bl	8000270 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <UART_SetConfig+0x4e4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a34      	ldr	r2, [pc, #208]	; (800435c <UART_SetConfig+0x4e4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004296:	441c      	add	r4, r3
 8004298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429c:	2200      	movs	r2, #0
 800429e:	673b      	str	r3, [r7, #112]	; 0x70
 80042a0:	677a      	str	r2, [r7, #116]	; 0x74
 80042a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042a6:	4642      	mov	r2, r8
 80042a8:	464b      	mov	r3, r9
 80042aa:	1891      	adds	r1, r2, r2
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	415b      	adcs	r3, r3
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b6:	4641      	mov	r1, r8
 80042b8:	1851      	adds	r1, r2, r1
 80042ba:	6039      	str	r1, [r7, #0]
 80042bc:	4649      	mov	r1, r9
 80042be:	414b      	adcs	r3, r1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042ce:	4659      	mov	r1, fp
 80042d0:	00cb      	lsls	r3, r1, #3
 80042d2:	4651      	mov	r1, sl
 80042d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042d8:	4651      	mov	r1, sl
 80042da:	00ca      	lsls	r2, r1, #3
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	4603      	mov	r3, r0
 80042e2:	4642      	mov	r2, r8
 80042e4:	189b      	adds	r3, r3, r2
 80042e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042e8:	464b      	mov	r3, r9
 80042ea:	460a      	mov	r2, r1
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	663b      	str	r3, [r7, #96]	; 0x60
 80042fc:	667a      	str	r2, [r7, #100]	; 0x64
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800430a:	4649      	mov	r1, r9
 800430c:	008b      	lsls	r3, r1, #2
 800430e:	4641      	mov	r1, r8
 8004310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004314:	4641      	mov	r1, r8
 8004316:	008a      	lsls	r2, r1, #2
 8004318:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800431c:	f7fb ffa8 	bl	8000270 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <UART_SetConfig+0x4e4>)
 8004326:	fba3 1302 	umull	r1, r3, r3, r2
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2164      	movs	r1, #100	; 0x64
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	3332      	adds	r3, #50	; 0x32
 8004338:	4a08      	ldr	r2, [pc, #32]	; (800435c <UART_SetConfig+0x4e4>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4422      	add	r2, r4
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	51eb851f 	.word	0x51eb851f

08004360 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004360:	b084      	sub	sp, #16
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	f107 001c 	add.w	r0, r7, #28
 800436e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004376:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004378:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800437a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800437e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004382:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004386:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800438a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800439a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	b004      	add	sp, #16
 80043b4:	4770      	bx	lr

080043b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2203      	movs	r2, #3
 80043fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0303 	and.w	r3, r3, #3
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004448:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800444e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004454:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004464:	f023 030f 	bic.w	r3, r3, #15
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	b2db      	uxtb	r3, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3314      	adds	r3, #20
 80044a6:	461a      	mov	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
}  
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044e4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80044ea:	431a      	orrs	r2, r3
                       Data->DPSM);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80044f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004508:	2300      	movs	r3, #0

}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004524:	2310      	movs	r3, #16
 8004526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004528:	2340      	movs	r3, #64	; 0x40
 800452a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004536:	f107 0308 	add.w	r3, r7, #8
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff74 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	2110      	movs	r1, #16
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f991 	bl	8004870 <SDMMC_GetCmdResp1>
 800454e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004550:	69fb      	ldr	r3, [r7, #28]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004568:	230c      	movs	r3, #12
 800456a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff52 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004586:	4a05      	ldr	r2, [pc, #20]	; (800459c <SDMMC_CmdStopTransfer+0x40>)
 8004588:	210c      	movs	r1, #12
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f970 	bl	8004870 <SDMMC_GetCmdResp1>
 8004590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004592:	69fb      	ldr	r3, [r7, #28]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	05f5e100 	.word	0x05f5e100

080045a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80045b0:	2307      	movs	r3, #7
 80045b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045b4:	2340      	movs	r3, #64	; 0x40
 80045b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045c2:	f107 0310 	add.w	r3, r7, #16
 80045c6:	4619      	mov	r1, r3
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ff2e 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	2107      	movs	r1, #7
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f94b 	bl	8004870 <SDMMC_GetCmdResp1>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b088      	sub	sp, #32
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff0d 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fb65 	bl	8004ce0 <SDMMC_GetCmdError>
 8004616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004618:	69fb      	ldr	r3, [r7, #28]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b088      	sub	sp, #32
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800462a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800462e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004630:	2308      	movs	r3, #8
 8004632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004634:	2340      	movs	r3, #64	; 0x40
 8004636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4619      	mov	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff feee 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 faf8 	bl	8004c44 <SDMMC_GetCmdResp7>
 8004654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004656:	69fb      	ldr	r3, [r7, #28]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800466e:	2337      	movs	r3, #55	; 0x37
 8004670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800467a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800467e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004680:	f107 0308 	add.w	r3, r7, #8
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fecf 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	2137      	movs	r1, #55	; 0x37
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8ec 	bl	8004870 <SDMMC_GetCmdResp1>
 8004698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800469a:	69fb      	ldr	r3, [r7, #28]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80046ba:	2329      	movs	r3, #41	; 0x29
 80046bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046be:	2340      	movs	r3, #64	; 0x40
 80046c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fea9 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f9ff 	bl	8004adc <SDMMC_GetCmdResp3>
 80046de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046e0:	69fb      	ldr	r3, [r7, #28]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80046f8:	2306      	movs	r3, #6
 80046fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046fc:	2340      	movs	r3, #64	; 0x40
 80046fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004708:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe8a 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	2106      	movs	r1, #6
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8a7 	bl	8004870 <SDMMC_GetCmdResp1>
 8004722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004724:	69fb      	ldr	r3, [r7, #28]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800473a:	2333      	movs	r3, #51	; 0x33
 800473c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800474c:	f107 0308 	add.w	r3, r7, #8
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fe69 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	2133      	movs	r1, #51	; 0x33
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f886 	bl	8004870 <SDMMC_GetCmdResp1>
 8004764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004766:	69fb      	ldr	r3, [r7, #28]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800477c:	2302      	movs	r3, #2
 800477e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004780:	23c0      	movs	r3, #192	; 0xc0
 8004782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fe48 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f956 	bl	8004a4c <SDMMC_GetCmdResp2>
 80047a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047a2:	69fb      	ldr	r3, [r7, #28]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80047ba:	2309      	movs	r3, #9
 80047bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80047be:	23c0      	movs	r3, #192	; 0xc0
 80047c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fe29 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f937 	bl	8004a4c <SDMMC_GetCmdResp2>
 80047de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047e0:	69fb      	ldr	r3, [r7, #28]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047f8:	2303      	movs	r3, #3
 80047fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fe0a 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	2103      	movs	r1, #3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f99c 	bl	8004b58 <SDMMC_GetCmdResp6>
 8004820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004822:	69fb      	ldr	r3, [r7, #28]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800483a:	230d      	movs	r3, #13
 800483c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fde9 	bl	800442a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	210d      	movs	r1, #13
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f806 	bl	8004870 <SDMMC_GetCmdResp1>
 8004864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004866:	69fb      	ldr	r3, [r7, #28]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	460b      	mov	r3, r1
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800487e:	4b70      	ldr	r3, [pc, #448]	; (8004a40 <SDMMC_GetCmdResp1+0x1d0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a70      	ldr	r2, [pc, #448]	; (8004a44 <SDMMC_GetCmdResp1+0x1d4>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	0a5a      	lsrs	r2, r3, #9
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	1e5a      	subs	r2, r3, #1
 8004896:	61fa      	str	r2, [r7, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800489c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048a0:	e0c9      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0ef      	beq.n	8004892 <SDMMC_GetCmdResp1+0x22>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ea      	bne.n	8004892 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2204      	movs	r2, #4
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048ce:	2304      	movs	r3, #4
 80048d0:	e0b1      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0a6      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22c5      	movs	r2, #197	; 0xc5
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fdc5 	bl	800447e <SDIO_GetCommandResponse>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d001      	beq.n	8004902 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048fe:	2301      	movs	r3, #1
 8004900:	e099      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004902:	2100      	movs	r1, #0
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff fdc7 	bl	8004498 <SDIO_GetResponse>
 800490a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <SDMMC_GetCmdResp1+0x1d8>)
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004916:	2300      	movs	r3, #0
 8004918:	e08d      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	da02      	bge.n	8004926 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004924:	e087      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	e080      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	e079      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800494c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004950:	e071      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800495c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004960:	e069      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800496c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004970:	e061      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800497c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004980:	e059      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800498c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004990:	e051      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800499c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a0:	e049      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80049ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049b0:	e041      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80049bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c0:	e039      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80049cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d0:	e031      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80049dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049e0:	e029      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80049ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049f0:	e021      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80049fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a00:	e019      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004a0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a10:	e011      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004a1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a20:	e009      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004a2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004a30:	e001      	b.n	8004a36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000004 	.word	0x20000004
 8004a44:	10624dd3 	.word	0x10624dd3
 8004a48:	fdffe008 	.word	0xfdffe008

08004a4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <SDMMC_GetCmdResp2+0x88>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <SDMMC_GetCmdResp2+0x8c>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0a5b      	lsrs	r3, r3, #9
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	60fa      	str	r2, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a78:	e026      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0ef      	beq.n	8004a6a <SDMMC_GetCmdResp2+0x1e>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e00e      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e003      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	22c5      	movs	r2, #197	; 0xc5
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000004 	.word	0x20000004
 8004ad8:	10624dd3 	.word	0x10624dd3

08004adc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <SDMMC_GetCmdResp3+0x74>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1a      	ldr	r2, [pc, #104]	; (8004b54 <SDMMC_GetCmdResp3+0x78>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d102      	bne.n	8004b0a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b08:	e01b      	b.n	8004b42 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ef      	beq.n	8004afa <SDMMC_GetCmdResp3+0x1e>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2204      	movs	r2, #4
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b36:	2304      	movs	r3, #4
 8004b38:	e003      	b.n	8004b42 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	22c5      	movs	r2, #197	; 0xc5
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000004 	.word	0x20000004
 8004b54:	10624dd3 	.word	0x10624dd3

08004b58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	460b      	mov	r3, r1
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b66:	4b35      	ldr	r3, [pc, #212]	; (8004c3c <SDMMC_GetCmdResp6+0xe4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <SDMMC_GetCmdResp6+0xe8>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b8a:	e052      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <SDMMC_GetCmdResp6+0x24>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ea      	bne.n	8004b7c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bb8:	2304      	movs	r3, #4
 8004bba:	e03a      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e02f      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff fc53 	bl	800447e <SDIO_GetCommandResponse>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461a      	mov	r2, r3
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d001      	beq.n	8004be6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e025      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22c5      	movs	r2, #197	; 0xc5
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004bec:	2100      	movs	r1, #0
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fc52 	bl	8004498 <SDIO_GetResponse>
 8004bf4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e011      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c1c:	e009      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c2c:	e001      	b.n	8004c32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000004 	.word	0x20000004
 8004c40:	10624dd3 	.word	0x10624dd3

08004c44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c4c:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <SDMMC_GetCmdResp7+0x94>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <SDMMC_GetCmdResp7+0x98>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0a5b      	lsrs	r3, r3, #9
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	60fa      	str	r2, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c70:	e02c      	b.n	8004ccc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <SDMMC_GetCmdResp7+0x1e>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	e014      	b.n	8004ccc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e009      	b.n	8004ccc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004cca:	2300      	movs	r3, #0
  
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000004 	.word	0x20000004
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <SDMMC_GetCmdError+0x50>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a11      	ldr	r2, [pc, #68]	; (8004d34 <SDMMC_GetCmdError+0x54>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0a5b      	lsrs	r3, r3, #9
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1e5a      	subs	r2, r3, #1
 8004d02:	60fa      	str	r2, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d102      	bne.n	8004d0e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d0c:	e009      	b.n	8004d22 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f1      	beq.n	8004cfe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	22c5      	movs	r2, #197	; 0xc5
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000004 	.word	0x20000004
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <_btn_get_tick>:
	.long_press_timeout = DEFAULT_LONG_PRESS_MS,
	.press_timeout = DEFAULT_PRESS_MS,
	.multi_press = DEFAULT_MULTI_PRESS,
};

static inline uint32_t _btn_get_tick() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8004d3c:	f7fc f944 	bl	8000fc8 <HAL_GetTick>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <_btn_tick_timeout>:

static inline bool _btn_tick_timeout(uint32_t tick_check, uint32_t time_out) {
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
	if (_btn_get_tick() - tick_check > time_out) {
 8004d50:	f7ff fff2 	bl	8004d38 <_btn_get_tick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d201      	bcs.n	8004d64 <_btn_tick_timeout+0x1e>
		return true;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <_btn_tick_timeout+0x20>
	}
	return false;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <_btn_send_event>:

static button_err_t _btn_send_event(btn_manage_t *btn_handle, button_t *btn,
		btn_ev_t event_id) {
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	71fb      	strb	r3, [r7, #7]
	if (!btn_handle->event_cb) {
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <_btn_send_event+0x1c>
		return BUTTON_FAIL;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
 8004d88:	e00e      	b.n	8004da8 <_btn_send_event+0x3a>
	}
	if (btn->event_registed & event_id) {
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <_btn_send_event+0x38>
		btn_handle->event_cb(btn_handle->user, btn->pin, event_id);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	6851      	ldr	r1, [r2, #4]
 8004da2:	79fa      	ldrb	r2, [r7, #7]
 8004da4:	4798      	blx	r3
	}
	return BUTTON_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <_find_btn_by_pin>:

static inline button_t* _find_btn_by_pin(btn_manage_t *btn_handle, int pin) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < btn_handle->num_btns; i++) {
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e017      	b.n	8004df0 <_find_btn_by_pin+0x40>
		if (btn_handle->list_btn[i].pin == pin) {
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	330c      	adds	r3, #12
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d108      	bne.n	8004dea <_find_btn_by_pin+0x3a>
			return &btn_handle->list_btn[i];
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	3308      	adds	r3, #8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	4413      	add	r3, r2
 8004de8:	e020      	b.n	8004e2c <_find_btn_by_pin+0x7c>
	for (int i = 0; i < btn_handle->num_btns; i++) {
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	3301      	adds	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	dbe2      	blt.n	8004dc0 <_find_btn_by_pin+0x10>
		}
	}
	STM_LOGE(TAG, "Button [%d] not found", pin);
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <_find_btn_by_pin+0x84>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <_find_btn_by_pin+0x7a>
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <_find_btn_by_pin+0x88>)
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	bf00      	nop
 8004e08:	f7fc f8de 	bl	8000fc8 <HAL_GetTick>
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <_find_btn_by_pin+0x8c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	6939      	ldr	r1, [r7, #16]
 8004e16:	480a      	ldr	r0, [pc, #40]	; (8004e40 <_find_btn_by_pin+0x90>)
 8004e18:	f000 fb58 	bl	80054cc <iprintf>
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4809      	ldr	r0, [pc, #36]	; (8004e44 <_find_btn_by_pin+0x94>)
 8004e20:	f000 fb54 	bl	80054cc <iprintf>
 8004e24:	200a      	movs	r0, #10
 8004e26:	f000 fb69 	bl	80054fc <putchar>
	return NULL;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200001d4 	.word	0x200001d4
 8004e38:	0800656c 	.word	0x0800656c
 8004e3c:	20000010 	.word	0x20000010
 8004e40:	08006570 	.word	0x08006570
 8004e44:	08006584 	.word	0x08006584

08004e48 <_btn_update_state>:

static button_err_t _btn_update_state(btn_manage_t *btn_handle, button_t *btn,
		button_state_t new_state) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
	if (!btn) {
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <_btn_update_state+0x1a>
		return BUTTON_FAIL;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	e048      	b.n	8004ef4 <_btn_update_state+0xac>
	}
	if ((new_state == BUTTON_STATE_RISING)
 8004e62:	79fb      	ldrb	r3, [r7, #7]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d11e      	bne.n	8004ea6 <_btn_update_state+0x5e>
			&& ((btn->state == BUTTON_STATE_FAILLING_IDLE)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d003      	beq.n	8004e78 <_btn_update_state+0x30>
					|| (btn->state == BUTTON_EVENT_MULTI_PRESS_IDLE))) {
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d116      	bne.n	8004ea6 <_btn_update_state+0x5e>
		btn->long_press_tick = _btn_get_tick();
 8004e78:	f7ff ff5e 	bl	8004d38 <_btn_get_tick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	611a      	str	r2, [r3, #16]
		btn->press_tick = _btn_get_tick();
 8004e82:	f7ff ff59 	bl	8004d38 <_btn_get_tick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	60da      	str	r2, [r3, #12]
		btn->state = BUTTON_STATE_RISING_IDLE;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	701a      	strb	r2, [r3, #0]
		if (btn->cnt_press == 0) {
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12b      	bne.n	8004ef2 <_btn_update_state+0xaa>
//			STM_LOGI(TAG, "BUTTON_EVENT_PRESS");
			_btn_send_event(btn_handle, btn, BUTTON_EVENT_PRESS);
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff65 	bl	8004d6e <_btn_send_event>
		if (btn->cnt_press == 0) {
 8004ea4:	e025      	b.n	8004ef2 <_btn_update_state+0xaa>
		}
	} else if ((new_state == BUTTON_STATE_FAILLING)
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d122      	bne.n	8004ef2 <_btn_update_state+0xaa>
			&& ((btn->state == BUTTON_STATE_RISING_IDLE)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d003      	beq.n	8004ebc <_btn_update_state+0x74>
					|| (btn->state == BUTTON_STATE_LONG_PRESS_IDLE))) {
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b07      	cmp	r3, #7
 8004eba:	d11a      	bne.n	8004ef2 <_btn_update_state+0xaa>
		if (!_btn_tick_timeout(btn->press_tick, btn_handle->press_timeout)) {
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7ff ff3d 	bl	8004d46 <_btn_tick_timeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f083 0301 	eor.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d009      	beq.n	8004eec <_btn_update_state+0xa4>
			btn->cnt_press++;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
			btn->press_tick = _btn_get_tick();
 8004ee2:	f7ff ff29 	bl	8004d38 <_btn_get_tick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	60da      	str	r2, [r3, #12]
		}
		btn->state = BUTTON_STATE_FAILLING_IDLE;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2205      	movs	r2, #5
 8004ef0:	701a      	strb	r2, [r3, #0]
	}

	return BUTTON_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <btn_manage_update_state>:

button_err_t btn_manage_update_state(int pin, button_state_t new_state) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
	if (!g_btn_manage.run) {
 8004f08:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <btn_manage_update_state+0x70>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f083 0301 	eor.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d019      	beq.n	8004f4a <btn_manage_update_state+0x4e>
		STM_LOGW(TAG, "BTManage_Init need run before");
 8004f16:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <btn_manage_update_state+0x74>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d912      	bls.n	8004f44 <btn_manage_update_state+0x48>
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <btn_manage_update_state+0x78>)
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	bf00      	nop
 8004f24:	f7fc f850 	bl	8000fc8 <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <btn_manage_update_state+0x7c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	6939      	ldr	r1, [r7, #16]
 8004f32:	4812      	ldr	r0, [pc, #72]	; (8004f7c <btn_manage_update_state+0x80>)
 8004f34:	f000 faca 	bl	80054cc <iprintf>
 8004f38:	4811      	ldr	r0, [pc, #68]	; (8004f80 <btn_manage_update_state+0x84>)
 8004f3a:	f000 fac7 	bl	80054cc <iprintf>
 8004f3e:	200a      	movs	r0, #10
 8004f40:	f000 fadc 	bl	80054fc <putchar>
		return BUTTON_FAIL;
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	e00b      	b.n	8004f62 <btn_manage_update_state+0x66>
	}
	button_t *btn = _find_btn_by_pin(&g_btn_manage, pin);
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4807      	ldr	r0, [pc, #28]	; (8004f6c <btn_manage_update_state+0x70>)
 8004f4e:	f7ff ff2f 	bl	8004db0 <_find_btn_by_pin>
 8004f52:	6178      	str	r0, [r7, #20]
	_btn_update_state(&g_btn_manage, btn, new_state);
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	4804      	ldr	r0, [pc, #16]	; (8004f6c <btn_manage_update_state+0x70>)
 8004f5c:	f7ff ff74 	bl	8004e48 <_btn_update_state>
	return BUTTON_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000014 	.word	0x20000014
 8004f70:	200001d4 	.word	0x200001d4
 8004f74:	0800659c 	.word	0x0800659c
 8004f78:	20000010 	.word	0x20000010
 8004f7c:	08006570 	.word	0x08006570
 8004f80:	080065a0 	.word	0x080065a0

08004f84 <_btn_manage_check_state>:

static button_err_t _btn_manage_check_state(btn_manage_t *btn_handle,
		button_t *btn) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	if (btn->state == BUTTON_STATE_RISING_IDLE) {
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d129      	bne.n	8004fea <_btn_manage_check_state+0x66>
		if (_btn_tick_timeout(btn->long_press_tick,
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f7ff fed0 	bl	8004d46 <_btn_tick_timeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <_btn_manage_check_state+0x46>
				btn_handle->long_press_timeout) && btn->cnt_press == 0) {
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <_btn_manage_check_state+0x46>
			// STM_LOGI(TAG,"BUTTON_EVENT_LONG_PRESS");
			_btn_send_event(btn_handle, btn, BUTTON_EVENT_LONG_PRESS);
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fed8 	bl	8004d6e <_btn_send_event>
			btn->cnt_press = 0;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
			btn->state = BUTTON_STATE_LONG_PRESS_IDLE;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2207      	movs	r2, #7
 8004fc8:	701a      	strb	r2, [r3, #0]
		}
		if (_btn_tick_timeout(btn->press_tick, btn_handle->press_timeout)) {
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff feb6 	bl	8004d46 <_btn_tick_timeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <_btn_manage_check_state+0x62>
			btn->cnt_press = 0;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
		}
		return BUTTON_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e04c      	b.n	8005084 <_btn_manage_check_state+0x100>
	} else if (btn->state == BUTTON_STATE_FAILLING_IDLE) {
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b05      	cmp	r3, #5
 8004ff0:	d12c      	bne.n	800504c <_btn_manage_check_state+0xc8>
		if (btn->cnt_press == btn_handle->multi_press) {
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d107      	bne.n	8005010 <_btn_manage_check_state+0x8c>
			_btn_send_event(btn_handle, btn, BUTTON_EVENT_MULTI_PRESS);
 8005000:	2210      	movs	r2, #16
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff feb2 	bl	8004d6e <_btn_send_event>
			btn->state = BUTTON_EVENT_MULTI_PRESS_IDLE;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2206      	movs	r2, #6
 800500e:	701a      	strb	r2, [r3, #0]
		}
		if (!_btn_tick_timeout(btn->press_tick, btn_handle->press_timeout)) {
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7ff fe93 	bl	8004d46 <_btn_tick_timeout>
 8005020:	4603      	mov	r3, r0
 8005022:	f083 0301 	eor.w	r3, r3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <_btn_manage_check_state+0xac>
			return BUTTON_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e029      	b.n	8005084 <_btn_manage_check_state+0x100>
		}
		if (btn->cnt_press == 2) {
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d104      	bne.n	8005042 <_btn_manage_check_state+0xbe>
			_btn_send_event(btn_handle, btn, BUTTON_EVENT_DOUBLE_PRESS);
 8005038:	2204      	movs	r2, #4
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff fe96 	bl	8004d6e <_btn_send_event>
		}
		btn->cnt_press = 0;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
		return BUTTON_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e01b      	b.n	8005084 <_btn_manage_check_state+0x100>
	} else if (btn->state == BUTTON_EVENT_MULTI_PRESS_IDLE) {
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d10f      	bne.n	8005074 <_btn_manage_check_state+0xf0>
		if (_btn_tick_timeout(btn->press_tick, btn_handle->press_timeout)) {
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7ff fe71 	bl	8004d46 <_btn_tick_timeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <_btn_manage_check_state+0xec>
			btn->cnt_press = 0;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
		}
		return BUTTON_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	e007      	b.n	8005084 <_btn_manage_check_state+0x100>
	} else if (btn->state == BUTTON_STATE_LONG_PRESS_IDLE) {
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b07      	cmp	r3, #7
 800507a:	d101      	bne.n	8005080 <_btn_manage_check_state+0xfc>
		return BUTTON_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e001      	b.n	8005084 <_btn_manage_check_state+0x100>
	}

	return BUTTON_FAIL;
 8005080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <btn_manage_process>:

button_err_t btn_manage_process(void) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
	if (!g_btn_manage.run) {
 8005092:	4b24      	ldr	r3, [pc, #144]	; (8005124 <btn_manage_process+0x98>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f083 0301 	eor.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d019      	beq.n	80050d4 <btn_manage_process+0x48>
		STM_LOGW(TAG, "BTManage_Init need run before");
 80050a0:	4b21      	ldr	r3, [pc, #132]	; (8005128 <btn_manage_process+0x9c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d912      	bls.n	80050ce <btn_manage_process+0x42>
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <btn_manage_process+0xa0>)
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	bf00      	nop
 80050ae:	f7fb ff8b 	bl	8000fc8 <HAL_GetTick>
 80050b2:	6038      	str	r0, [r7, #0]
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <btn_manage_process+0xa4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	481d      	ldr	r0, [pc, #116]	; (8005134 <btn_manage_process+0xa8>)
 80050be:	f000 fa05 	bl	80054cc <iprintf>
 80050c2:	481d      	ldr	r0, [pc, #116]	; (8005138 <btn_manage_process+0xac>)
 80050c4:	f000 fa02 	bl	80054cc <iprintf>
 80050c8:	200a      	movs	r0, #10
 80050ca:	f000 fa17 	bl	80054fc <putchar>
		return BUTTON_FAIL;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e023      	b.n	800511c <btn_manage_process+0x90>
	}
	button_t *btn = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e018      	b.n	8005110 <btn_manage_process+0x84>
		btn = &g_btn_manage.list_btn[i];
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	3308      	adds	r3, #8
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <btn_manage_process+0x98>)
 80050ec:	4413      	add	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
		if ((!btn) || (btn->state < BUTTON_STATE_RISING_IDLE)) {
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <btn_manage_process+0x7c>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d904      	bls.n	8005108 <btn_manage_process+0x7c>
			continue;
		}
		_btn_manage_check_state(&g_btn_manage, btn);
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4808      	ldr	r0, [pc, #32]	; (8005124 <btn_manage_process+0x98>)
 8005102:	f7ff ff3f 	bl	8004f84 <_btn_manage_check_state>
 8005106:	e000      	b.n	800510a <btn_manage_process+0x7e>
			continue;
 8005108:	bf00      	nop
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <btn_manage_process+0x98>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	429a      	cmp	r2, r3
 8005118:	dbe1      	blt.n	80050de <btn_manage_process+0x52>
	}
	return BUTTON_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000014 	.word	0x20000014
 8005128:	200001d4 	.word	0x200001d4
 800512c:	0800659c 	.word	0x0800659c
 8005130:	20000010 	.word	0x20000010
 8005134:	08006570 	.word	0x08006570
 8005138:	080065a0 	.word	0x080065a0

0800513c <btn_register_event_callback>:

button_err_t btn_register_event_callback(btn_cb_t event_cb, void *user) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	if (!g_btn_manage.run) {
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <btn_register_event_callback+0x64>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d019      	beq.n	8005188 <btn_register_event_callback+0x4c>
		STM_LOGW(TAG, "BTManage_Init need run before");
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <btn_register_event_callback+0x68>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d912      	bls.n	8005182 <btn_register_event_callback+0x46>
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <btn_register_event_callback+0x6c>)
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	bf00      	nop
 8005162:	f7fb ff31 	bl	8000fc8 <HAL_GetTick>
 8005166:	60b8      	str	r0, [r7, #8]
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <btn_register_event_callback+0x70>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	480f      	ldr	r0, [pc, #60]	; (80051b0 <btn_register_event_callback+0x74>)
 8005172:	f000 f9ab 	bl	80054cc <iprintf>
 8005176:	480f      	ldr	r0, [pc, #60]	; (80051b4 <btn_register_event_callback+0x78>)
 8005178:	f000 f9a8 	bl	80054cc <iprintf>
 800517c:	200a      	movs	r0, #10
 800517e:	f000 f9bd 	bl	80054fc <putchar>
		return BUTTON_FAIL;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	e006      	b.n	8005196 <btn_register_event_callback+0x5a>
	}
	g_btn_manage.event_cb = event_cb;
 8005188:	4a05      	ldr	r2, [pc, #20]	; (80051a0 <btn_register_event_callback+0x64>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6513      	str	r3, [r2, #80]	; 0x50
	g_btn_manage.user = user;
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <btn_register_event_callback+0x64>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	6613      	str	r3, [r2, #96]	; 0x60
	return BUTTON_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000014 	.word	0x20000014
 80051a4:	200001d4 	.word	0x200001d4
 80051a8:	0800659c 	.word	0x0800659c
 80051ac:	20000010 	.word	0x20000010
 80051b0:	08006570 	.word	0x08006570
 80051b4:	080065a0 	.word	0x080065a0

080051b8 <btn_manage_add_new_button>:

button_err_t btn_manage_add_new_button(int pin, int event_mask) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	; 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	if (!g_btn_manage.run) {
 80051c2:	4b4f      	ldr	r3, [pc, #316]	; (8005300 <btn_manage_add_new_button+0x148>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f083 0301 	eor.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d019      	beq.n	8005204 <btn_manage_add_new_button+0x4c>
		STM_LOGW(TAG, "BTManage_Init need run before");
 80051d0:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <btn_manage_add_new_button+0x14c>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d912      	bls.n	80051fe <btn_manage_add_new_button+0x46>
 80051d8:	4b4b      	ldr	r3, [pc, #300]	; (8005308 <btn_manage_add_new_button+0x150>)
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	bf00      	nop
 80051de:	f7fb fef3 	bl	8000fc8 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]
 80051e4:	4b49      	ldr	r3, [pc, #292]	; (800530c <btn_manage_add_new_button+0x154>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	4848      	ldr	r0, [pc, #288]	; (8005310 <btn_manage_add_new_button+0x158>)
 80051ee:	f000 f96d 	bl	80054cc <iprintf>
 80051f2:	4848      	ldr	r0, [pc, #288]	; (8005314 <btn_manage_add_new_button+0x15c>)
 80051f4:	f000 f96a 	bl	80054cc <iprintf>
 80051f8:	200a      	movs	r0, #10
 80051fa:	f000 f97f 	bl	80054fc <putchar>
		return BUTTON_FAIL;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e079      	b.n	80052f8 <btn_manage_add_new_button+0x140>
	}
	button_t *button = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520c:	e056      	b.n	80052bc <btn_manage_add_new_button+0x104>
		button = &g_btn_manage.list_btn[i];
 800520e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	3308      	adds	r3, #8
 800521a:	4a39      	ldr	r2, [pc, #228]	; (8005300 <btn_manage_add_new_button+0x148>)
 800521c:	4413      	add	r3, r2
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (pin == button->pin) {
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	429a      	cmp	r2, r3
 8005228:	d119      	bne.n	800525e <btn_manage_add_new_button+0xa6>
			STM_LOGW(TAG, "Button Exist");
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <btn_manage_add_new_button+0x14c>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d912      	bls.n	8005258 <btn_manage_add_new_button+0xa0>
 8005232:	4b35      	ldr	r3, [pc, #212]	; (8005308 <btn_manage_add_new_button+0x150>)
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	bf00      	nop
 8005238:	f7fb fec6 	bl	8000fc8 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]
 800523e:	4b33      	ldr	r3, [pc, #204]	; (800530c <btn_manage_add_new_button+0x154>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	6979      	ldr	r1, [r7, #20]
 8005246:	4832      	ldr	r0, [pc, #200]	; (8005310 <btn_manage_add_new_button+0x158>)
 8005248:	f000 f940 	bl	80054cc <iprintf>
 800524c:	4832      	ldr	r0, [pc, #200]	; (8005318 <btn_manage_add_new_button+0x160>)
 800524e:	f000 f93d 	bl	80054cc <iprintf>
 8005252:	200a      	movs	r0, #10
 8005254:	f000 f952 	bl	80054fc <putchar>
			return BUTTON_FAIL;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	e04c      	b.n	80052f8 <btn_manage_add_new_button+0x140>
		}
		if (button->pin == -1) {
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d126      	bne.n	80052b6 <btn_manage_add_new_button+0xfe>
			button->event_registed = event_mask;
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	615a      	str	r2, [r3, #20]
			button->cnt_press = 0;
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2200      	movs	r2, #0
 8005272:	609a      	str	r2, [r3, #8]
			button->pin = pin;
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]
			button->state = BUTTON_STATE_FAILLING_IDLE;
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	2205      	movs	r2, #5
 800527e:	701a      	strb	r2, [r3, #0]
			STM_LOGW(TAG, "Register Device : '%d' to index [%d]", pin, i);
 8005280:	4b20      	ldr	r3, [pc, #128]	; (8005304 <btn_manage_add_new_button+0x14c>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d914      	bls.n	80052b2 <btn_manage_add_new_button+0xfa>
 8005288:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <btn_manage_add_new_button+0x150>)
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	bf00      	nop
 800528e:	f7fb fe9b 	bl	8000fc8 <HAL_GetTick>
 8005292:	61b8      	str	r0, [r7, #24]
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <btn_manage_add_new_button+0x154>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	69f9      	ldr	r1, [r7, #28]
 800529c:	481c      	ldr	r0, [pc, #112]	; (8005310 <btn_manage_add_new_button+0x158>)
 800529e:	f000 f915 	bl	80054cc <iprintf>
 80052a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	481d      	ldr	r0, [pc, #116]	; (800531c <btn_manage_add_new_button+0x164>)
 80052a8:	f000 f910 	bl	80054cc <iprintf>
 80052ac:	200a      	movs	r0, #10
 80052ae:	f000 f925 	bl	80054fc <putchar>
			return BUTTON_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e020      	b.n	80052f8 <btn_manage_add_new_button+0x140>
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	3301      	adds	r3, #1
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052bc:	4b10      	ldr	r3, [pc, #64]	; (8005300 <btn_manage_add_new_button+0x148>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	dba3      	blt.n	800520e <btn_manage_add_new_button+0x56>
		}
	}
	STM_LOGE(TAG, "Register Device Failed : Not Enough Space");
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <btn_manage_add_new_button+0x14c>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d012      	beq.n	80052f4 <btn_manage_add_new_button+0x13c>
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <btn_manage_add_new_button+0x168>)
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	bf00      	nop
 80052d4:	f7fb fe78 	bl	8000fc8 <HAL_GetTick>
 80052d8:	6238      	str	r0, [r7, #32]
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <btn_manage_add_new_button+0x154>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a3a      	ldr	r2, [r7, #32]
 80052e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e2:	480b      	ldr	r0, [pc, #44]	; (8005310 <btn_manage_add_new_button+0x158>)
 80052e4:	f000 f8f2 	bl	80054cc <iprintf>
 80052e8:	480e      	ldr	r0, [pc, #56]	; (8005324 <btn_manage_add_new_button+0x16c>)
 80052ea:	f000 f8ef 	bl	80054cc <iprintf>
 80052ee:	200a      	movs	r0, #10
 80052f0:	f000 f904 	bl	80054fc <putchar>
	return BUTTON_FAIL;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3730      	adds	r7, #48	; 0x30
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20000014 	.word	0x20000014
 8005304:	200001d4 	.word	0x200001d4
 8005308:	0800659c 	.word	0x0800659c
 800530c:	20000010 	.word	0x20000010
 8005310:	08006570 	.word	0x08006570
 8005314:	080065a0 	.word	0x080065a0
 8005318:	080065c0 	.word	0x080065c0
 800531c:	080065d0 	.word	0x080065d0
 8005320:	0800656c 	.word	0x0800656c
 8005324:	080065f8 	.word	0x080065f8

08005328 <btn_manage_init>:

button_err_t btn_manage_init(btn_manage_cfg_t *cfg) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	if (cfg->num_btns > NUM_BUTTONS) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d919      	bls.n	800536c <btn_manage_init+0x44>
		STM_LOGE(TAG, "cfg->num_btns > NUM_BUTTONS");
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <btn_manage_init+0xc0>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <btn_manage_init+0x3e>
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <btn_manage_init+0xc4>)
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	bf00      	nop
 8005346:	f7fb fe3f 	bl	8000fc8 <HAL_GetTick>
 800534a:	60b8      	str	r0, [r7, #8]
 800534c:	4b28      	ldr	r3, [pc, #160]	; (80053f0 <btn_manage_init+0xc8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	4827      	ldr	r0, [pc, #156]	; (80053f4 <btn_manage_init+0xcc>)
 8005356:	f000 f8b9 	bl	80054cc <iprintf>
 800535a:	4827      	ldr	r0, [pc, #156]	; (80053f8 <btn_manage_init+0xd0>)
 800535c:	f000 f8b6 	bl	80054cc <iprintf>
 8005360:	200a      	movs	r0, #10
 8005362:	f000 f8cb 	bl	80054fc <putchar>
		return BUTTON_FAIL;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	e038      	b.n	80053de <btn_manage_init+0xb6>
	}
	g_btn_manage.num_btns = cfg->num_btns;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <btn_manage_init+0xd4>)
 8005374:	605a      	str	r2, [r3, #4]

	button_t *button = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e00f      	b.n	80053a0 <btn_manage_init+0x78>
		button = &g_btn_manage.list_btn[i];
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	3308      	adds	r3, #8
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <btn_manage_init+0xd4>)
 800538e:	4413      	add	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
		button->pin = -1;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f04f 32ff 	mov.w	r2, #4294967295
 8005398:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < g_btn_manage.num_btns; i++) {
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	4b16      	ldr	r3, [pc, #88]	; (80053fc <btn_manage_init+0xd4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	dbea      	blt.n	8005380 <btn_manage_init+0x58>
	}

	g_btn_manage.user = NULL;
 80053aa:	4b14      	ldr	r3, [pc, #80]	; (80053fc <btn_manage_init+0xd4>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60
	g_btn_manage.multi_press =
			(cfg->multi_press > 0) ? cfg->multi_press : DEFAULT_MULTI_PRESS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	785b      	ldrb	r3, [r3, #1]
	g_btn_manage.multi_press =
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <btn_manage_init+0x96>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	e000      	b.n	80053c0 <btn_manage_init+0x98>
 80053be:	2305      	movs	r3, #5
 80053c0:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <btn_manage_init+0xd4>)
 80053c2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
	g_btn_manage.long_press_timeout = cfg->long_press_timeout;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <btn_manage_init+0xd4>)
 80053cc:	6593      	str	r3, [r2, #88]	; 0x58
	g_btn_manage.press_timeout = cfg->press_timeout;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <btn_manage_init+0xd4>)
 80053d4:	65d3      	str	r3, [r2, #92]	; 0x5c
	g_btn_manage.run = true;
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <btn_manage_init+0xd4>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
	return BUTTON_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200001d4 	.word	0x200001d4
 80053ec:	0800656c 	.word	0x0800656c
 80053f0:	20000010 	.word	0x20000010
 80053f4:	08006570 	.word	0x08006570
 80053f8:	08006624 	.word	0x08006624
 80053fc:	20000014 	.word	0x20000014

08005400 <_write>:

static UART_HandleTypeDef *p_huart = NULL;
stm_log_level_t log_level = STM_LOG_LEVEL_NONE;

#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
	if (!p_huart) {
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <_write+0x38>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <_write+0x1a>
		return -1;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	e009      	b.n	800542e <_write+0x2e>
	}
	HAL_UART_Transmit(p_huart, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <_write+0x38>)
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	b29a      	uxth	r2, r3
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	f7fd ff70 	bl	800330c <HAL_UART_Transmit>
	return len;
 800542c:	687b      	ldr	r3, [r7, #4]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200001d0 	.word	0x200001d0

0800543c <STM_Logging_Init>:
	HAL_UART_Transmit(p_huart, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
	return ch;
}
#endif

void STM_Logging_Init(UART_HandleTypeDef* p_uart, stm_log_level_t level) {
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
	p_huart = p_uart;
 8005448:	4a05      	ldr	r2, [pc, #20]	; (8005460 <STM_Logging_Init+0x24>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
	log_level = level;
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <STM_Logging_Init+0x28>)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	7013      	strb	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	200001d0 	.word	0x200001d0
 8005464:	200001d4 	.word	0x200001d4

08005468 <__errno>:
 8005468:	4b01      	ldr	r3, [pc, #4]	; (8005470 <__errno+0x8>)
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000078 	.word	0x20000078

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2600      	movs	r6, #0
 8005480:	42a6      	cmp	r6, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4d0b      	ldr	r5, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f001 f80c 	bl	80064a4 <_init>
 800548c:	1b64      	subs	r4, r4, r5
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2600      	movs	r6, #0
 8005492:	42a6      	cmp	r6, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f855 3b04 	ldr.w	r3, [r5], #4
 800549c:	4798      	blx	r3
 800549e:	3601      	adds	r6, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a6:	4798      	blx	r3
 80054a8:	3601      	adds	r6, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	080066f8 	.word	0x080066f8
 80054b0:	080066f8 	.word	0x080066f8
 80054b4:	080066f8 	.word	0x080066f8
 80054b8:	080066fc 	.word	0x080066fc

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <iprintf>:
 80054cc:	b40f      	push	{r0, r1, r2, r3}
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <iprintf+0x2c>)
 80054d0:	b513      	push	{r0, r1, r4, lr}
 80054d2:	681c      	ldr	r4, [r3, #0]
 80054d4:	b124      	cbz	r4, 80054e0 <iprintf+0x14>
 80054d6:	69a3      	ldr	r3, [r4, #24]
 80054d8:	b913      	cbnz	r3, 80054e0 <iprintf+0x14>
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f87c 	bl	80055d8 <__sinit>
 80054e0:	ab05      	add	r3, sp, #20
 80054e2:	9a04      	ldr	r2, [sp, #16]
 80054e4:	68a1      	ldr	r1, [r4, #8]
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f9d3 	bl	8005894 <_vfiprintf_r>
 80054ee:	b002      	add	sp, #8
 80054f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f4:	b004      	add	sp, #16
 80054f6:	4770      	bx	lr
 80054f8:	20000078 	.word	0x20000078

080054fc <putchar>:
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <putchar+0x28>)
 80054fe:	b513      	push	{r0, r1, r4, lr}
 8005500:	681c      	ldr	r4, [r3, #0]
 8005502:	4601      	mov	r1, r0
 8005504:	b134      	cbz	r4, 8005514 <putchar+0x18>
 8005506:	69a3      	ldr	r3, [r4, #24]
 8005508:	b923      	cbnz	r3, 8005514 <putchar+0x18>
 800550a:	9001      	str	r0, [sp, #4]
 800550c:	4620      	mov	r0, r4
 800550e:	f000 f863 	bl	80055d8 <__sinit>
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	68a2      	ldr	r2, [r4, #8]
 8005516:	4620      	mov	r0, r4
 8005518:	b002      	add	sp, #8
 800551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800551e:	f000 bc7d 	b.w	8005e1c <_putc_r>
 8005522:	bf00      	nop
 8005524:	20000078 	.word	0x20000078

08005528 <std>:
 8005528:	2300      	movs	r3, #0
 800552a:	b510      	push	{r4, lr}
 800552c:	4604      	mov	r4, r0
 800552e:	e9c0 3300 	strd	r3, r3, [r0]
 8005532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005536:	6083      	str	r3, [r0, #8]
 8005538:	8181      	strh	r1, [r0, #12]
 800553a:	6643      	str	r3, [r0, #100]	; 0x64
 800553c:	81c2      	strh	r2, [r0, #14]
 800553e:	6183      	str	r3, [r0, #24]
 8005540:	4619      	mov	r1, r3
 8005542:	2208      	movs	r2, #8
 8005544:	305c      	adds	r0, #92	; 0x5c
 8005546:	f7ff ffb9 	bl	80054bc <memset>
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <std+0x38>)
 800554c:	6263      	str	r3, [r4, #36]	; 0x24
 800554e:	4b05      	ldr	r3, [pc, #20]	; (8005564 <std+0x3c>)
 8005550:	62a3      	str	r3, [r4, #40]	; 0x28
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <std+0x40>)
 8005554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <std+0x44>)
 8005558:	6224      	str	r4, [r4, #32]
 800555a:	6323      	str	r3, [r4, #48]	; 0x30
 800555c:	bd10      	pop	{r4, pc}
 800555e:	bf00      	nop
 8005560:	08005ecd 	.word	0x08005ecd
 8005564:	08005eef 	.word	0x08005eef
 8005568:	08005f27 	.word	0x08005f27
 800556c:	08005f4b 	.word	0x08005f4b

08005570 <_cleanup_r>:
 8005570:	4901      	ldr	r1, [pc, #4]	; (8005578 <_cleanup_r+0x8>)
 8005572:	f000 b8af 	b.w	80056d4 <_fwalk_reent>
 8005576:	bf00      	nop
 8005578:	08006225 	.word	0x08006225

0800557c <__sfmoreglue>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	2268      	movs	r2, #104	; 0x68
 8005580:	1e4d      	subs	r5, r1, #1
 8005582:	4355      	muls	r5, r2
 8005584:	460e      	mov	r6, r1
 8005586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800558a:	f000 f8e5 	bl	8005758 <_malloc_r>
 800558e:	4604      	mov	r4, r0
 8005590:	b140      	cbz	r0, 80055a4 <__sfmoreglue+0x28>
 8005592:	2100      	movs	r1, #0
 8005594:	e9c0 1600 	strd	r1, r6, [r0]
 8005598:	300c      	adds	r0, #12
 800559a:	60a0      	str	r0, [r4, #8]
 800559c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055a0:	f7ff ff8c 	bl	80054bc <memset>
 80055a4:	4620      	mov	r0, r4
 80055a6:	bd70      	pop	{r4, r5, r6, pc}

080055a8 <__sfp_lock_acquire>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__sfp_lock_acquire+0x8>)
 80055aa:	f000 b8b3 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80055ae:	bf00      	nop
 80055b0:	200001d6 	.word	0x200001d6

080055b4 <__sfp_lock_release>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__sfp_lock_release+0x8>)
 80055b6:	f000 b8ae 	b.w	8005716 <__retarget_lock_release_recursive>
 80055ba:	bf00      	nop
 80055bc:	200001d6 	.word	0x200001d6

080055c0 <__sinit_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__sinit_lock_acquire+0x8>)
 80055c2:	f000 b8a7 	b.w	8005714 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	200001d7 	.word	0x200001d7

080055cc <__sinit_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__sinit_lock_release+0x8>)
 80055ce:	f000 b8a2 	b.w	8005716 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	200001d7 	.word	0x200001d7

080055d8 <__sinit>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	f7ff fff0 	bl	80055c0 <__sinit_lock_acquire>
 80055e0:	69a3      	ldr	r3, [r4, #24]
 80055e2:	b11b      	cbz	r3, 80055ec <__sinit+0x14>
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f7ff bff0 	b.w	80055cc <__sinit_lock_release>
 80055ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055f0:	6523      	str	r3, [r4, #80]	; 0x50
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <__sinit+0x68>)
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <__sinit+0x6c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055fa:	42a3      	cmp	r3, r4
 80055fc:	bf04      	itt	eq
 80055fe:	2301      	moveq	r3, #1
 8005600:	61a3      	streq	r3, [r4, #24]
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f820 	bl	8005648 <__sfp>
 8005608:	6060      	str	r0, [r4, #4]
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f81c 	bl	8005648 <__sfp>
 8005610:	60a0      	str	r0, [r4, #8]
 8005612:	4620      	mov	r0, r4
 8005614:	f000 f818 	bl	8005648 <__sfp>
 8005618:	2200      	movs	r2, #0
 800561a:	60e0      	str	r0, [r4, #12]
 800561c:	2104      	movs	r1, #4
 800561e:	6860      	ldr	r0, [r4, #4]
 8005620:	f7ff ff82 	bl	8005528 <std>
 8005624:	68a0      	ldr	r0, [r4, #8]
 8005626:	2201      	movs	r2, #1
 8005628:	2109      	movs	r1, #9
 800562a:	f7ff ff7d 	bl	8005528 <std>
 800562e:	68e0      	ldr	r0, [r4, #12]
 8005630:	2202      	movs	r2, #2
 8005632:	2112      	movs	r1, #18
 8005634:	f7ff ff78 	bl	8005528 <std>
 8005638:	2301      	movs	r3, #1
 800563a:	61a3      	str	r3, [r4, #24]
 800563c:	e7d2      	b.n	80055e4 <__sinit+0xc>
 800563e:	bf00      	nop
 8005640:	08006658 	.word	0x08006658
 8005644:	08005571 	.word	0x08005571

08005648 <__sfp>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	4607      	mov	r7, r0
 800564c:	f7ff ffac 	bl	80055a8 <__sfp_lock_acquire>
 8005650:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <__sfp+0x84>)
 8005652:	681e      	ldr	r6, [r3, #0]
 8005654:	69b3      	ldr	r3, [r6, #24]
 8005656:	b913      	cbnz	r3, 800565e <__sfp+0x16>
 8005658:	4630      	mov	r0, r6
 800565a:	f7ff ffbd 	bl	80055d8 <__sinit>
 800565e:	3648      	adds	r6, #72	; 0x48
 8005660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005664:	3b01      	subs	r3, #1
 8005666:	d503      	bpl.n	8005670 <__sfp+0x28>
 8005668:	6833      	ldr	r3, [r6, #0]
 800566a:	b30b      	cbz	r3, 80056b0 <__sfp+0x68>
 800566c:	6836      	ldr	r6, [r6, #0]
 800566e:	e7f7      	b.n	8005660 <__sfp+0x18>
 8005670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005674:	b9d5      	cbnz	r5, 80056ac <__sfp+0x64>
 8005676:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <__sfp+0x88>)
 8005678:	60e3      	str	r3, [r4, #12]
 800567a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800567e:	6665      	str	r5, [r4, #100]	; 0x64
 8005680:	f000 f847 	bl	8005712 <__retarget_lock_init_recursive>
 8005684:	f7ff ff96 	bl	80055b4 <__sfp_lock_release>
 8005688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800568c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005690:	6025      	str	r5, [r4, #0]
 8005692:	61a5      	str	r5, [r4, #24]
 8005694:	2208      	movs	r2, #8
 8005696:	4629      	mov	r1, r5
 8005698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800569c:	f7ff ff0e 	bl	80054bc <memset>
 80056a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056a8:	4620      	mov	r0, r4
 80056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ac:	3468      	adds	r4, #104	; 0x68
 80056ae:	e7d9      	b.n	8005664 <__sfp+0x1c>
 80056b0:	2104      	movs	r1, #4
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ff62 	bl	800557c <__sfmoreglue>
 80056b8:	4604      	mov	r4, r0
 80056ba:	6030      	str	r0, [r6, #0]
 80056bc:	2800      	cmp	r0, #0
 80056be:	d1d5      	bne.n	800566c <__sfp+0x24>
 80056c0:	f7ff ff78 	bl	80055b4 <__sfp_lock_release>
 80056c4:	230c      	movs	r3, #12
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	e7ee      	b.n	80056a8 <__sfp+0x60>
 80056ca:	bf00      	nop
 80056cc:	08006658 	.word	0x08006658
 80056d0:	ffff0001 	.word	0xffff0001

080056d4 <_fwalk_reent>:
 80056d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d8:	4606      	mov	r6, r0
 80056da:	4688      	mov	r8, r1
 80056dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056e0:	2700      	movs	r7, #0
 80056e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056e6:	f1b9 0901 	subs.w	r9, r9, #1
 80056ea:	d505      	bpl.n	80056f8 <_fwalk_reent+0x24>
 80056ec:	6824      	ldr	r4, [r4, #0]
 80056ee:	2c00      	cmp	r4, #0
 80056f0:	d1f7      	bne.n	80056e2 <_fwalk_reent+0xe>
 80056f2:	4638      	mov	r0, r7
 80056f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f8:	89ab      	ldrh	r3, [r5, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d907      	bls.n	800570e <_fwalk_reent+0x3a>
 80056fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005702:	3301      	adds	r3, #1
 8005704:	d003      	beq.n	800570e <_fwalk_reent+0x3a>
 8005706:	4629      	mov	r1, r5
 8005708:	4630      	mov	r0, r6
 800570a:	47c0      	blx	r8
 800570c:	4307      	orrs	r7, r0
 800570e:	3568      	adds	r5, #104	; 0x68
 8005710:	e7e9      	b.n	80056e6 <_fwalk_reent+0x12>

08005712 <__retarget_lock_init_recursive>:
 8005712:	4770      	bx	lr

08005714 <__retarget_lock_acquire_recursive>:
 8005714:	4770      	bx	lr

08005716 <__retarget_lock_release_recursive>:
 8005716:	4770      	bx	lr

08005718 <sbrk_aligned>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4e0e      	ldr	r6, [pc, #56]	; (8005754 <sbrk_aligned+0x3c>)
 800571c:	460c      	mov	r4, r1
 800571e:	6831      	ldr	r1, [r6, #0]
 8005720:	4605      	mov	r5, r0
 8005722:	b911      	cbnz	r1, 800572a <sbrk_aligned+0x12>
 8005724:	f000 fbc2 	bl	8005eac <_sbrk_r>
 8005728:	6030      	str	r0, [r6, #0]
 800572a:	4621      	mov	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f000 fbbd 	bl	8005eac <_sbrk_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d00a      	beq.n	800574c <sbrk_aligned+0x34>
 8005736:	1cc4      	adds	r4, r0, #3
 8005738:	f024 0403 	bic.w	r4, r4, #3
 800573c:	42a0      	cmp	r0, r4
 800573e:	d007      	beq.n	8005750 <sbrk_aligned+0x38>
 8005740:	1a21      	subs	r1, r4, r0
 8005742:	4628      	mov	r0, r5
 8005744:	f000 fbb2 	bl	8005eac <_sbrk_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d101      	bne.n	8005750 <sbrk_aligned+0x38>
 800574c:	f04f 34ff 	mov.w	r4, #4294967295
 8005750:	4620      	mov	r0, r4
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	200001dc 	.word	0x200001dc

08005758 <_malloc_r>:
 8005758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800575c:	1ccd      	adds	r5, r1, #3
 800575e:	f025 0503 	bic.w	r5, r5, #3
 8005762:	3508      	adds	r5, #8
 8005764:	2d0c      	cmp	r5, #12
 8005766:	bf38      	it	cc
 8005768:	250c      	movcc	r5, #12
 800576a:	2d00      	cmp	r5, #0
 800576c:	4607      	mov	r7, r0
 800576e:	db01      	blt.n	8005774 <_malloc_r+0x1c>
 8005770:	42a9      	cmp	r1, r5
 8005772:	d905      	bls.n	8005780 <_malloc_r+0x28>
 8005774:	230c      	movs	r3, #12
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	2600      	movs	r6, #0
 800577a:	4630      	mov	r0, r6
 800577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005780:	4e2e      	ldr	r6, [pc, #184]	; (800583c <_malloc_r+0xe4>)
 8005782:	f000 fe03 	bl	800638c <__malloc_lock>
 8005786:	6833      	ldr	r3, [r6, #0]
 8005788:	461c      	mov	r4, r3
 800578a:	bb34      	cbnz	r4, 80057da <_malloc_r+0x82>
 800578c:	4629      	mov	r1, r5
 800578e:	4638      	mov	r0, r7
 8005790:	f7ff ffc2 	bl	8005718 <sbrk_aligned>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	4604      	mov	r4, r0
 8005798:	d14d      	bne.n	8005836 <_malloc_r+0xde>
 800579a:	6834      	ldr	r4, [r6, #0]
 800579c:	4626      	mov	r6, r4
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d140      	bne.n	8005824 <_malloc_r+0xcc>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	4631      	mov	r1, r6
 80057a6:	4638      	mov	r0, r7
 80057a8:	eb04 0803 	add.w	r8, r4, r3
 80057ac:	f000 fb7e 	bl	8005eac <_sbrk_r>
 80057b0:	4580      	cmp	r8, r0
 80057b2:	d13a      	bne.n	800582a <_malloc_r+0xd2>
 80057b4:	6821      	ldr	r1, [r4, #0]
 80057b6:	3503      	adds	r5, #3
 80057b8:	1a6d      	subs	r5, r5, r1
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	4629      	mov	r1, r5
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ffa5 	bl	8005718 <sbrk_aligned>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d02b      	beq.n	800582a <_malloc_r+0xd2>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	442b      	add	r3, r5
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	e00e      	b.n	80057f8 <_malloc_r+0xa0>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	1b52      	subs	r2, r2, r5
 80057de:	d41e      	bmi.n	800581e <_malloc_r+0xc6>
 80057e0:	2a0b      	cmp	r2, #11
 80057e2:	d916      	bls.n	8005812 <_malloc_r+0xba>
 80057e4:	1961      	adds	r1, r4, r5
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	6025      	str	r5, [r4, #0]
 80057ea:	bf18      	it	ne
 80057ec:	6059      	strne	r1, [r3, #4]
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	bf08      	it	eq
 80057f2:	6031      	streq	r1, [r6, #0]
 80057f4:	5162      	str	r2, [r4, r5]
 80057f6:	604b      	str	r3, [r1, #4]
 80057f8:	4638      	mov	r0, r7
 80057fa:	f104 060b 	add.w	r6, r4, #11
 80057fe:	f000 fdcb 	bl	8006398 <__malloc_unlock>
 8005802:	f026 0607 	bic.w	r6, r6, #7
 8005806:	1d23      	adds	r3, r4, #4
 8005808:	1af2      	subs	r2, r6, r3
 800580a:	d0b6      	beq.n	800577a <_malloc_r+0x22>
 800580c:	1b9b      	subs	r3, r3, r6
 800580e:	50a3      	str	r3, [r4, r2]
 8005810:	e7b3      	b.n	800577a <_malloc_r+0x22>
 8005812:	6862      	ldr	r2, [r4, #4]
 8005814:	42a3      	cmp	r3, r4
 8005816:	bf0c      	ite	eq
 8005818:	6032      	streq	r2, [r6, #0]
 800581a:	605a      	strne	r2, [r3, #4]
 800581c:	e7ec      	b.n	80057f8 <_malloc_r+0xa0>
 800581e:	4623      	mov	r3, r4
 8005820:	6864      	ldr	r4, [r4, #4]
 8005822:	e7b2      	b.n	800578a <_malloc_r+0x32>
 8005824:	4634      	mov	r4, r6
 8005826:	6876      	ldr	r6, [r6, #4]
 8005828:	e7b9      	b.n	800579e <_malloc_r+0x46>
 800582a:	230c      	movs	r3, #12
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	4638      	mov	r0, r7
 8005830:	f000 fdb2 	bl	8006398 <__malloc_unlock>
 8005834:	e7a1      	b.n	800577a <_malloc_r+0x22>
 8005836:	6025      	str	r5, [r4, #0]
 8005838:	e7de      	b.n	80057f8 <_malloc_r+0xa0>
 800583a:	bf00      	nop
 800583c:	200001d8 	.word	0x200001d8

08005840 <__sfputc_r>:
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	3b01      	subs	r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	b410      	push	{r4}
 8005848:	6093      	str	r3, [r2, #8]
 800584a:	da08      	bge.n	800585e <__sfputc_r+0x1e>
 800584c:	6994      	ldr	r4, [r2, #24]
 800584e:	42a3      	cmp	r3, r4
 8005850:	db01      	blt.n	8005856 <__sfputc_r+0x16>
 8005852:	290a      	cmp	r1, #10
 8005854:	d103      	bne.n	800585e <__sfputc_r+0x1e>
 8005856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800585a:	f000 bb7b 	b.w	8005f54 <__swbuf_r>
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	1c58      	adds	r0, r3, #1
 8005862:	6010      	str	r0, [r2, #0]
 8005864:	7019      	strb	r1, [r3, #0]
 8005866:	4608      	mov	r0, r1
 8005868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800586c:	4770      	bx	lr

0800586e <__sfputs_r>:
 800586e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005870:	4606      	mov	r6, r0
 8005872:	460f      	mov	r7, r1
 8005874:	4614      	mov	r4, r2
 8005876:	18d5      	adds	r5, r2, r3
 8005878:	42ac      	cmp	r4, r5
 800587a:	d101      	bne.n	8005880 <__sfputs_r+0x12>
 800587c:	2000      	movs	r0, #0
 800587e:	e007      	b.n	8005890 <__sfputs_r+0x22>
 8005880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005884:	463a      	mov	r2, r7
 8005886:	4630      	mov	r0, r6
 8005888:	f7ff ffda 	bl	8005840 <__sfputc_r>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d1f3      	bne.n	8005878 <__sfputs_r+0xa>
 8005890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005894 <_vfiprintf_r>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	460d      	mov	r5, r1
 800589a:	b09d      	sub	sp, #116	; 0x74
 800589c:	4614      	mov	r4, r2
 800589e:	4698      	mov	r8, r3
 80058a0:	4606      	mov	r6, r0
 80058a2:	b118      	cbz	r0, 80058ac <_vfiprintf_r+0x18>
 80058a4:	6983      	ldr	r3, [r0, #24]
 80058a6:	b90b      	cbnz	r3, 80058ac <_vfiprintf_r+0x18>
 80058a8:	f7ff fe96 	bl	80055d8 <__sinit>
 80058ac:	4b89      	ldr	r3, [pc, #548]	; (8005ad4 <_vfiprintf_r+0x240>)
 80058ae:	429d      	cmp	r5, r3
 80058b0:	d11b      	bne.n	80058ea <_vfiprintf_r+0x56>
 80058b2:	6875      	ldr	r5, [r6, #4]
 80058b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058b6:	07d9      	lsls	r1, r3, #31
 80058b8:	d405      	bmi.n	80058c6 <_vfiprintf_r+0x32>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	059a      	lsls	r2, r3, #22
 80058be:	d402      	bmi.n	80058c6 <_vfiprintf_r+0x32>
 80058c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c2:	f7ff ff27 	bl	8005714 <__retarget_lock_acquire_recursive>
 80058c6:	89ab      	ldrh	r3, [r5, #12]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	d501      	bpl.n	80058d0 <_vfiprintf_r+0x3c>
 80058cc:	692b      	ldr	r3, [r5, #16]
 80058ce:	b9eb      	cbnz	r3, 800590c <_vfiprintf_r+0x78>
 80058d0:	4629      	mov	r1, r5
 80058d2:	4630      	mov	r0, r6
 80058d4:	f000 fba2 	bl	800601c <__swsetup_r>
 80058d8:	b1c0      	cbz	r0, 800590c <_vfiprintf_r+0x78>
 80058da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058dc:	07dc      	lsls	r4, r3, #31
 80058de:	d50e      	bpl.n	80058fe <_vfiprintf_r+0x6a>
 80058e0:	f04f 30ff 	mov.w	r0, #4294967295
 80058e4:	b01d      	add	sp, #116	; 0x74
 80058e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ea:	4b7b      	ldr	r3, [pc, #492]	; (8005ad8 <_vfiprintf_r+0x244>)
 80058ec:	429d      	cmp	r5, r3
 80058ee:	d101      	bne.n	80058f4 <_vfiprintf_r+0x60>
 80058f0:	68b5      	ldr	r5, [r6, #8]
 80058f2:	e7df      	b.n	80058b4 <_vfiprintf_r+0x20>
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <_vfiprintf_r+0x248>)
 80058f6:	429d      	cmp	r5, r3
 80058f8:	bf08      	it	eq
 80058fa:	68f5      	ldreq	r5, [r6, #12]
 80058fc:	e7da      	b.n	80058b4 <_vfiprintf_r+0x20>
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	0598      	lsls	r0, r3, #22
 8005902:	d4ed      	bmi.n	80058e0 <_vfiprintf_r+0x4c>
 8005904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005906:	f7ff ff06 	bl	8005716 <__retarget_lock_release_recursive>
 800590a:	e7e9      	b.n	80058e0 <_vfiprintf_r+0x4c>
 800590c:	2300      	movs	r3, #0
 800590e:	9309      	str	r3, [sp, #36]	; 0x24
 8005910:	2320      	movs	r3, #32
 8005912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005916:	f8cd 800c 	str.w	r8, [sp, #12]
 800591a:	2330      	movs	r3, #48	; 0x30
 800591c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ae0 <_vfiprintf_r+0x24c>
 8005920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005924:	f04f 0901 	mov.w	r9, #1
 8005928:	4623      	mov	r3, r4
 800592a:	469a      	mov	sl, r3
 800592c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005930:	b10a      	cbz	r2, 8005936 <_vfiprintf_r+0xa2>
 8005932:	2a25      	cmp	r2, #37	; 0x25
 8005934:	d1f9      	bne.n	800592a <_vfiprintf_r+0x96>
 8005936:	ebba 0b04 	subs.w	fp, sl, r4
 800593a:	d00b      	beq.n	8005954 <_vfiprintf_r+0xc0>
 800593c:	465b      	mov	r3, fp
 800593e:	4622      	mov	r2, r4
 8005940:	4629      	mov	r1, r5
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff ff93 	bl	800586e <__sfputs_r>
 8005948:	3001      	adds	r0, #1
 800594a:	f000 80aa 	beq.w	8005aa2 <_vfiprintf_r+0x20e>
 800594e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005950:	445a      	add	r2, fp
 8005952:	9209      	str	r2, [sp, #36]	; 0x24
 8005954:	f89a 3000 	ldrb.w	r3, [sl]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80a2 	beq.w	8005aa2 <_vfiprintf_r+0x20e>
 800595e:	2300      	movs	r3, #0
 8005960:	f04f 32ff 	mov.w	r2, #4294967295
 8005964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005968:	f10a 0a01 	add.w	sl, sl, #1
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005974:	931a      	str	r3, [sp, #104]	; 0x68
 8005976:	4654      	mov	r4, sl
 8005978:	2205      	movs	r2, #5
 800597a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597e:	4858      	ldr	r0, [pc, #352]	; (8005ae0 <_vfiprintf_r+0x24c>)
 8005980:	f7fa fc26 	bl	80001d0 <memchr>
 8005984:	9a04      	ldr	r2, [sp, #16]
 8005986:	b9d8      	cbnz	r0, 80059c0 <_vfiprintf_r+0x12c>
 8005988:	06d1      	lsls	r1, r2, #27
 800598a:	bf44      	itt	mi
 800598c:	2320      	movmi	r3, #32
 800598e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005992:	0713      	lsls	r3, r2, #28
 8005994:	bf44      	itt	mi
 8005996:	232b      	movmi	r3, #43	; 0x2b
 8005998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599c:	f89a 3000 	ldrb.w	r3, [sl]
 80059a0:	2b2a      	cmp	r3, #42	; 0x2a
 80059a2:	d015      	beq.n	80059d0 <_vfiprintf_r+0x13c>
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	4654      	mov	r4, sl
 80059a8:	2000      	movs	r0, #0
 80059aa:	f04f 0c0a 	mov.w	ip, #10
 80059ae:	4621      	mov	r1, r4
 80059b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b4:	3b30      	subs	r3, #48	; 0x30
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	d94e      	bls.n	8005a58 <_vfiprintf_r+0x1c4>
 80059ba:	b1b0      	cbz	r0, 80059ea <_vfiprintf_r+0x156>
 80059bc:	9207      	str	r2, [sp, #28]
 80059be:	e014      	b.n	80059ea <_vfiprintf_r+0x156>
 80059c0:	eba0 0308 	sub.w	r3, r0, r8
 80059c4:	fa09 f303 	lsl.w	r3, r9, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	46a2      	mov	sl, r4
 80059ce:	e7d2      	b.n	8005976 <_vfiprintf_r+0xe2>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d19      	adds	r1, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9103      	str	r1, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfbb      	ittet	lt
 80059dc:	425b      	neglt	r3, r3
 80059de:	f042 0202 	orrlt.w	r2, r2, #2
 80059e2:	9307      	strge	r3, [sp, #28]
 80059e4:	9307      	strlt	r3, [sp, #28]
 80059e6:	bfb8      	it	lt
 80059e8:	9204      	strlt	r2, [sp, #16]
 80059ea:	7823      	ldrb	r3, [r4, #0]
 80059ec:	2b2e      	cmp	r3, #46	; 0x2e
 80059ee:	d10c      	bne.n	8005a0a <_vfiprintf_r+0x176>
 80059f0:	7863      	ldrb	r3, [r4, #1]
 80059f2:	2b2a      	cmp	r3, #42	; 0x2a
 80059f4:	d135      	bne.n	8005a62 <_vfiprintf_r+0x1ce>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	9203      	str	r2, [sp, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bfb8      	it	lt
 8005a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a06:	3402      	adds	r4, #2
 8005a08:	9305      	str	r3, [sp, #20]
 8005a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005af0 <_vfiprintf_r+0x25c>
 8005a0e:	7821      	ldrb	r1, [r4, #0]
 8005a10:	2203      	movs	r2, #3
 8005a12:	4650      	mov	r0, sl
 8005a14:	f7fa fbdc 	bl	80001d0 <memchr>
 8005a18:	b140      	cbz	r0, 8005a2c <_vfiprintf_r+0x198>
 8005a1a:	2340      	movs	r3, #64	; 0x40
 8005a1c:	eba0 000a 	sub.w	r0, r0, sl
 8005a20:	fa03 f000 	lsl.w	r0, r3, r0
 8005a24:	9b04      	ldr	r3, [sp, #16]
 8005a26:	4303      	orrs	r3, r0
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	482c      	ldr	r0, [pc, #176]	; (8005ae4 <_vfiprintf_r+0x250>)
 8005a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a36:	2206      	movs	r2, #6
 8005a38:	f7fa fbca 	bl	80001d0 <memchr>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d03f      	beq.n	8005ac0 <_vfiprintf_r+0x22c>
 8005a40:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <_vfiprintf_r+0x254>)
 8005a42:	bb1b      	cbnz	r3, 8005a8c <_vfiprintf_r+0x1f8>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	3307      	adds	r3, #7
 8005a48:	f023 0307 	bic.w	r3, r3, #7
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a52:	443b      	add	r3, r7
 8005a54:	9309      	str	r3, [sp, #36]	; 0x24
 8005a56:	e767      	b.n	8005928 <_vfiprintf_r+0x94>
 8005a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e7a5      	b.n	80059ae <_vfiprintf_r+0x11a>
 8005a62:	2300      	movs	r3, #0
 8005a64:	3401      	adds	r4, #1
 8005a66:	9305      	str	r3, [sp, #20]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	f04f 0c0a 	mov.w	ip, #10
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a74:	3a30      	subs	r2, #48	; 0x30
 8005a76:	2a09      	cmp	r2, #9
 8005a78:	d903      	bls.n	8005a82 <_vfiprintf_r+0x1ee>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0c5      	beq.n	8005a0a <_vfiprintf_r+0x176>
 8005a7e:	9105      	str	r1, [sp, #20]
 8005a80:	e7c3      	b.n	8005a0a <_vfiprintf_r+0x176>
 8005a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a86:	4604      	mov	r4, r0
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e7f0      	b.n	8005a6e <_vfiprintf_r+0x1da>
 8005a8c:	ab03      	add	r3, sp, #12
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4b16      	ldr	r3, [pc, #88]	; (8005aec <_vfiprintf_r+0x258>)
 8005a94:	a904      	add	r1, sp, #16
 8005a96:	4630      	mov	r0, r6
 8005a98:	f3af 8000 	nop.w
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	1c78      	adds	r0, r7, #1
 8005aa0:	d1d6      	bne.n	8005a50 <_vfiprintf_r+0x1bc>
 8005aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aa4:	07d9      	lsls	r1, r3, #31
 8005aa6:	d405      	bmi.n	8005ab4 <_vfiprintf_r+0x220>
 8005aa8:	89ab      	ldrh	r3, [r5, #12]
 8005aaa:	059a      	lsls	r2, r3, #22
 8005aac:	d402      	bmi.n	8005ab4 <_vfiprintf_r+0x220>
 8005aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab0:	f7ff fe31 	bl	8005716 <__retarget_lock_release_recursive>
 8005ab4:	89ab      	ldrh	r3, [r5, #12]
 8005ab6:	065b      	lsls	r3, r3, #25
 8005ab8:	f53f af12 	bmi.w	80058e0 <_vfiprintf_r+0x4c>
 8005abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005abe:	e711      	b.n	80058e4 <_vfiprintf_r+0x50>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <_vfiprintf_r+0x258>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f000 f880 	bl	8005bd0 <_printf_i>
 8005ad0:	e7e4      	b.n	8005a9c <_vfiprintf_r+0x208>
 8005ad2:	bf00      	nop
 8005ad4:	0800667c 	.word	0x0800667c
 8005ad8:	0800669c 	.word	0x0800669c
 8005adc:	0800665c 	.word	0x0800665c
 8005ae0:	080066bc 	.word	0x080066bc
 8005ae4:	080066c6 	.word	0x080066c6
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	0800586f 	.word	0x0800586f
 8005af0:	080066c2 	.word	0x080066c2

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4699      	mov	r9, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	bfb8      	it	lt
 8005b08:	4613      	movlt	r3, r2
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b10:	4607      	mov	r7, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc26      	bgt.n	8005b8a <_printf_common+0x96>
 8005b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b40:	1e13      	subs	r3, r2, #0
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d42b      	bmi.n	8005ba4 <_printf_common+0xb0>
 8005b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b50:	4649      	mov	r1, r9
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	3001      	adds	r0, #1
 8005b58:	d01e      	beq.n	8005b98 <_printf_common+0xa4>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	68e5      	ldr	r5, [r4, #12]
 8005b5e:	6832      	ldr	r2, [r6, #0]
 8005b60:	f003 0306 	and.w	r3, r3, #6
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	bf08      	it	eq
 8005b68:	1aad      	subeq	r5, r5, r2
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	bf0c      	ite	eq
 8005b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b74:	2500      	movne	r5, #0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	bfc4      	itt	gt
 8005b7a:	1a9b      	subgt	r3, r3, r2
 8005b7c:	18ed      	addgt	r5, r5, r3
 8005b7e:	2600      	movs	r6, #0
 8005b80:	341a      	adds	r4, #26
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	d11a      	bne.n	8005bbc <_printf_common+0xc8>
 8005b86:	2000      	movs	r0, #0
 8005b88:	e008      	b.n	8005b9c <_printf_common+0xa8>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4638      	mov	r0, r7
 8005b92:	47c0      	blx	r8
 8005b94:	3001      	adds	r0, #1
 8005b96:	d103      	bne.n	8005ba0 <_printf_common+0xac>
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	e7c6      	b.n	8005b32 <_printf_common+0x3e>
 8005ba4:	18e1      	adds	r1, r4, r3
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	2030      	movs	r0, #48	; 0x30
 8005baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bae:	4422      	add	r2, r4
 8005bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb8:	3302      	adds	r3, #2
 8005bba:	e7c7      	b.n	8005b4c <_printf_common+0x58>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c0      	blx	r8
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d0e6      	beq.n	8005b98 <_printf_common+0xa4>
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7d9      	b.n	8005b82 <_printf_common+0x8e>
	...

08005bd0 <_printf_i>:
 8005bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	7e0f      	ldrb	r7, [r1, #24]
 8005bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd8:	2f78      	cmp	r7, #120	; 0x78
 8005bda:	4691      	mov	r9, r2
 8005bdc:	4680      	mov	r8, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	469a      	mov	sl, r3
 8005be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be6:	d807      	bhi.n	8005bf8 <_printf_i+0x28>
 8005be8:	2f62      	cmp	r7, #98	; 0x62
 8005bea:	d80a      	bhi.n	8005c02 <_printf_i+0x32>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	f000 80d8 	beq.w	8005da2 <_printf_i+0x1d2>
 8005bf2:	2f58      	cmp	r7, #88	; 0x58
 8005bf4:	f000 80a3 	beq.w	8005d3e <_printf_i+0x16e>
 8005bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c00:	e03a      	b.n	8005c78 <_printf_i+0xa8>
 8005c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c06:	2b15      	cmp	r3, #21
 8005c08:	d8f6      	bhi.n	8005bf8 <_printf_i+0x28>
 8005c0a:	a101      	add	r1, pc, #4	; (adr r1, 8005c10 <_printf_i+0x40>)
 8005c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c7d 	.word	0x08005c7d
 8005c18:	08005bf9 	.word	0x08005bf9
 8005c1c:	08005bf9 	.word	0x08005bf9
 8005c20:	08005bf9 	.word	0x08005bf9
 8005c24:	08005bf9 	.word	0x08005bf9
 8005c28:	08005c7d 	.word	0x08005c7d
 8005c2c:	08005bf9 	.word	0x08005bf9
 8005c30:	08005bf9 	.word	0x08005bf9
 8005c34:	08005bf9 	.word	0x08005bf9
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08005d89 	.word	0x08005d89
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005d6b 	.word	0x08005d6b
 8005c48:	08005bf9 	.word	0x08005bf9
 8005c4c:	08005bf9 	.word	0x08005bf9
 8005c50:	08005dab 	.word	0x08005dab
 8005c54:	08005bf9 	.word	0x08005bf9
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005bf9 	.word	0x08005bf9
 8005c60:	08005bf9 	.word	0x08005bf9
 8005c64:	08005d73 	.word	0x08005d73
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	602a      	str	r2, [r5, #0]
 8005c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0a3      	b.n	8005dc4 <_printf_i+0x1f4>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	6829      	ldr	r1, [r5, #0]
 8005c80:	0606      	lsls	r6, r0, #24
 8005c82:	f101 0304 	add.w	r3, r1, #4
 8005c86:	d50a      	bpl.n	8005c9e <_printf_i+0xce>
 8005c88:	680e      	ldr	r6, [r1, #0]
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	2e00      	cmp	r6, #0
 8005c8e:	da03      	bge.n	8005c98 <_printf_i+0xc8>
 8005c90:	232d      	movs	r3, #45	; 0x2d
 8005c92:	4276      	negs	r6, r6
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c98:	485e      	ldr	r0, [pc, #376]	; (8005e14 <_printf_i+0x244>)
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e019      	b.n	8005cd2 <_printf_i+0x102>
 8005c9e:	680e      	ldr	r6, [r1, #0]
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ca6:	bf18      	it	ne
 8005ca8:	b236      	sxthne	r6, r6
 8005caa:	e7ef      	b.n	8005c8c <_printf_i+0xbc>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	1d19      	adds	r1, r3, #4
 8005cb2:	6029      	str	r1, [r5, #0]
 8005cb4:	0601      	lsls	r1, r0, #24
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0xec>
 8005cb8:	681e      	ldr	r6, [r3, #0]
 8005cba:	e002      	b.n	8005cc2 <_printf_i+0xf2>
 8005cbc:	0646      	lsls	r6, r0, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0xe8>
 8005cc0:	881e      	ldrh	r6, [r3, #0]
 8005cc2:	4854      	ldr	r0, [pc, #336]	; (8005e14 <_printf_i+0x244>)
 8005cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2308      	moveq	r3, #8
 8005cca:	230a      	movne	r3, #10
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cd2:	6865      	ldr	r5, [r4, #4]
 8005cd4:	60a5      	str	r5, [r4, #8]
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	bfa2      	ittt	ge
 8005cda:	6821      	ldrge	r1, [r4, #0]
 8005cdc:	f021 0104 	bicge.w	r1, r1, #4
 8005ce0:	6021      	strge	r1, [r4, #0]
 8005ce2:	b90e      	cbnz	r6, 8005ce8 <_printf_i+0x118>
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	d04d      	beq.n	8005d84 <_printf_i+0x1b4>
 8005ce8:	4615      	mov	r5, r2
 8005cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cee:	fb03 6711 	mls	r7, r3, r1, r6
 8005cf2:	5dc7      	ldrb	r7, [r0, r7]
 8005cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf8:	4637      	mov	r7, r6
 8005cfa:	42bb      	cmp	r3, r7
 8005cfc:	460e      	mov	r6, r1
 8005cfe:	d9f4      	bls.n	8005cea <_printf_i+0x11a>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d10b      	bne.n	8005d1c <_printf_i+0x14c>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	07de      	lsls	r6, r3, #31
 8005d08:	d508      	bpl.n	8005d1c <_printf_i+0x14c>
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	6861      	ldr	r1, [r4, #4]
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	bfde      	ittt	le
 8005d12:	2330      	movle	r3, #48	; 0x30
 8005d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d1c:	1b52      	subs	r2, r2, r5
 8005d1e:	6122      	str	r2, [r4, #16]
 8005d20:	f8cd a000 	str.w	sl, [sp]
 8005d24:	464b      	mov	r3, r9
 8005d26:	aa03      	add	r2, sp, #12
 8005d28:	4621      	mov	r1, r4
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	f7ff fee2 	bl	8005af4 <_printf_common>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d14c      	bne.n	8005dce <_printf_i+0x1fe>
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	b004      	add	sp, #16
 8005d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <_printf_i+0x244>)
 8005d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d44:	6829      	ldr	r1, [r5, #0]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d4c:	6029      	str	r1, [r5, #0]
 8005d4e:	061d      	lsls	r5, r3, #24
 8005d50:	d514      	bpl.n	8005d7c <_printf_i+0x1ac>
 8005d52:	07df      	lsls	r7, r3, #31
 8005d54:	bf44      	itt	mi
 8005d56:	f043 0320 	orrmi.w	r3, r3, #32
 8005d5a:	6023      	strmi	r3, [r4, #0]
 8005d5c:	b91e      	cbnz	r6, 8005d66 <_printf_i+0x196>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f023 0320 	bic.w	r3, r3, #32
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	2310      	movs	r3, #16
 8005d68:	e7b0      	b.n	8005ccc <_printf_i+0xfc>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	2378      	movs	r3, #120	; 0x78
 8005d74:	4828      	ldr	r0, [pc, #160]	; (8005e18 <_printf_i+0x248>)
 8005d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d7a:	e7e3      	b.n	8005d44 <_printf_i+0x174>
 8005d7c:	0659      	lsls	r1, r3, #25
 8005d7e:	bf48      	it	mi
 8005d80:	b2b6      	uxthmi	r6, r6
 8005d82:	e7e6      	b.n	8005d52 <_printf_i+0x182>
 8005d84:	4615      	mov	r5, r2
 8005d86:	e7bb      	b.n	8005d00 <_printf_i+0x130>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6826      	ldr	r6, [r4, #0]
 8005d8c:	6961      	ldr	r1, [r4, #20]
 8005d8e:	1d18      	adds	r0, r3, #4
 8005d90:	6028      	str	r0, [r5, #0]
 8005d92:	0635      	lsls	r5, r6, #24
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0x1cc>
 8005d98:	6019      	str	r1, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0x1d2>
 8005d9c:	0670      	lsls	r0, r6, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0x1c8>
 8005da0:	8019      	strh	r1, [r3, #0]
 8005da2:	2300      	movs	r3, #0
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	4615      	mov	r5, r2
 8005da8:	e7ba      	b.n	8005d20 <_printf_i+0x150>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	1d1a      	adds	r2, r3, #4
 8005dae:	602a      	str	r2, [r5, #0]
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7fa fa0a 	bl	80001d0 <memchr>
 8005dbc:	b108      	cbz	r0, 8005dc2 <_printf_i+0x1f2>
 8005dbe:	1b40      	subs	r0, r0, r5
 8005dc0:	6060      	str	r0, [r4, #4]
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dcc:	e7a8      	b.n	8005d20 <_printf_i+0x150>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0ab      	beq.n	8005d34 <_printf_i+0x164>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	079b      	lsls	r3, r3, #30
 8005de0:	d413      	bmi.n	8005e0a <_printf_i+0x23a>
 8005de2:	68e0      	ldr	r0, [r4, #12]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4298      	cmp	r0, r3
 8005de8:	bfb8      	it	lt
 8005dea:	4618      	movlt	r0, r3
 8005dec:	e7a4      	b.n	8005d38 <_printf_i+0x168>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	47d0      	blx	sl
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d09b      	beq.n	8005d34 <_printf_i+0x164>
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	68e3      	ldr	r3, [r4, #12]
 8005e00:	9903      	ldr	r1, [sp, #12]
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dcf2      	bgt.n	8005dee <_printf_i+0x21e>
 8005e08:	e7eb      	b.n	8005de2 <_printf_i+0x212>
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	f104 0619 	add.w	r6, r4, #25
 8005e10:	e7f5      	b.n	8005dfe <_printf_i+0x22e>
 8005e12:	bf00      	nop
 8005e14:	080066cd 	.word	0x080066cd
 8005e18:	080066de 	.word	0x080066de

08005e1c <_putc_r>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	460d      	mov	r5, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	4606      	mov	r6, r0
 8005e24:	b118      	cbz	r0, 8005e2e <_putc_r+0x12>
 8005e26:	6983      	ldr	r3, [r0, #24]
 8005e28:	b90b      	cbnz	r3, 8005e2e <_putc_r+0x12>
 8005e2a:	f7ff fbd5 	bl	80055d8 <__sinit>
 8005e2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <_putc_r+0x84>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d124      	bne.n	8005e7e <_putc_r+0x62>
 8005e34:	6874      	ldr	r4, [r6, #4]
 8005e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e38:	07d8      	lsls	r0, r3, #31
 8005e3a:	d405      	bmi.n	8005e48 <_putc_r+0x2c>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	0599      	lsls	r1, r3, #22
 8005e40:	d402      	bmi.n	8005e48 <_putc_r+0x2c>
 8005e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e44:	f7ff fc66 	bl	8005714 <__retarget_lock_acquire_recursive>
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	da05      	bge.n	8005e5e <_putc_r+0x42>
 8005e52:	69a2      	ldr	r2, [r4, #24]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	db1c      	blt.n	8005e92 <_putc_r+0x76>
 8005e58:	b2eb      	uxtb	r3, r5
 8005e5a:	2b0a      	cmp	r3, #10
 8005e5c:	d019      	beq.n	8005e92 <_putc_r+0x76>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	701d      	strb	r5, [r3, #0]
 8005e66:	b2ed      	uxtb	r5, r5
 8005e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e6a:	07da      	lsls	r2, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_putc_r+0x5e>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	059b      	lsls	r3, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_putc_r+0x5e>
 8005e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e76:	f7ff fc4e 	bl	8005716 <__retarget_lock_release_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <_putc_r+0x88>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d101      	bne.n	8005e88 <_putc_r+0x6c>
 8005e84:	68b4      	ldr	r4, [r6, #8]
 8005e86:	e7d6      	b.n	8005e36 <_putc_r+0x1a>
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <_putc_r+0x8c>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	bf08      	it	eq
 8005e8e:	68f4      	ldreq	r4, [r6, #12]
 8005e90:	e7d1      	b.n	8005e36 <_putc_r+0x1a>
 8005e92:	4629      	mov	r1, r5
 8005e94:	4622      	mov	r2, r4
 8005e96:	4630      	mov	r0, r6
 8005e98:	f000 f85c 	bl	8005f54 <__swbuf_r>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	e7e3      	b.n	8005e68 <_putc_r+0x4c>
 8005ea0:	0800667c 	.word	0x0800667c
 8005ea4:	0800669c 	.word	0x0800669c
 8005ea8:	0800665c 	.word	0x0800665c

08005eac <_sbrk_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d06      	ldr	r5, [pc, #24]	; (8005ec8 <_sbrk_r+0x1c>)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fa ff34 	bl	8000d24 <_sbrk>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_sbrk_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_sbrk_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	200001e0 	.word	0x200001e0

08005ecc <__sread>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	460c      	mov	r4, r1
 8005ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed4:	f000 fab2 	bl	800643c <_read_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	bfab      	itete	ge
 8005edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ede:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee0:	181b      	addge	r3, r3, r0
 8005ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ee6:	bfac      	ite	ge
 8005ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eea:	81a3      	strhlt	r3, [r4, #12]
 8005eec:	bd10      	pop	{r4, pc}

08005eee <__swrite>:
 8005eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	898b      	ldrh	r3, [r1, #12]
 8005ef6:	05db      	lsls	r3, r3, #23
 8005ef8:	4605      	mov	r5, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4616      	mov	r6, r2
 8005efe:	d505      	bpl.n	8005f0c <__swrite+0x1e>
 8005f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f04:	2302      	movs	r3, #2
 8005f06:	2200      	movs	r2, #0
 8005f08:	f000 f9c8 	bl	800629c <_lseek_r>
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f16:	81a3      	strh	r3, [r4, #12]
 8005f18:	4632      	mov	r2, r6
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f22:	f000 b869 	b.w	8005ff8 <_write_r>

08005f26 <__sseek>:
 8005f26:	b510      	push	{r4, lr}
 8005f28:	460c      	mov	r4, r1
 8005f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2e:	f000 f9b5 	bl	800629c <_lseek_r>
 8005f32:	1c43      	adds	r3, r0, #1
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	bf15      	itete	ne
 8005f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f42:	81a3      	strheq	r3, [r4, #12]
 8005f44:	bf18      	it	ne
 8005f46:	81a3      	strhne	r3, [r4, #12]
 8005f48:	bd10      	pop	{r4, pc}

08005f4a <__sclose>:
 8005f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4e:	f000 b8d3 	b.w	80060f8 <_close_r>
	...

08005f54 <__swbuf_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	460e      	mov	r6, r1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b118      	cbz	r0, 8005f66 <__swbuf_r+0x12>
 8005f5e:	6983      	ldr	r3, [r0, #24]
 8005f60:	b90b      	cbnz	r3, 8005f66 <__swbuf_r+0x12>
 8005f62:	f7ff fb39 	bl	80055d8 <__sinit>
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <__swbuf_r+0x98>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d12b      	bne.n	8005fc4 <__swbuf_r+0x70>
 8005f6c:	686c      	ldr	r4, [r5, #4]
 8005f6e:	69a3      	ldr	r3, [r4, #24]
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	071a      	lsls	r2, r3, #28
 8005f76:	d52f      	bpl.n	8005fd8 <__swbuf_r+0x84>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	b36b      	cbz	r3, 8005fd8 <__swbuf_r+0x84>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1ac0      	subs	r0, r0, r3
 8005f82:	6963      	ldr	r3, [r4, #20]
 8005f84:	b2f6      	uxtb	r6, r6
 8005f86:	4283      	cmp	r3, r0
 8005f88:	4637      	mov	r7, r6
 8005f8a:	dc04      	bgt.n	8005f96 <__swbuf_r+0x42>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f948 	bl	8006224 <_fflush_r>
 8005f94:	bb30      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005f96:	68a3      	ldr	r3, [r4, #8]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	6022      	str	r2, [r4, #0]
 8005fa2:	701e      	strb	r6, [r3, #0]
 8005fa4:	6963      	ldr	r3, [r4, #20]
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	4283      	cmp	r3, r0
 8005faa:	d004      	beq.n	8005fb6 <__swbuf_r+0x62>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d506      	bpl.n	8005fc0 <__swbuf_r+0x6c>
 8005fb2:	2e0a      	cmp	r6, #10
 8005fb4:	d104      	bne.n	8005fc0 <__swbuf_r+0x6c>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f933 	bl	8006224 <_fflush_r>
 8005fbe:	b988      	cbnz	r0, 8005fe4 <__swbuf_r+0x90>
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc4:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <__swbuf_r+0x9c>)
 8005fc6:	429c      	cmp	r4, r3
 8005fc8:	d101      	bne.n	8005fce <__swbuf_r+0x7a>
 8005fca:	68ac      	ldr	r4, [r5, #8]
 8005fcc:	e7cf      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <__swbuf_r+0xa0>)
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	bf08      	it	eq
 8005fd4:	68ec      	ldreq	r4, [r5, #12]
 8005fd6:	e7ca      	b.n	8005f6e <__swbuf_r+0x1a>
 8005fd8:	4621      	mov	r1, r4
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 f81e 	bl	800601c <__swsetup_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d0cb      	beq.n	8005f7c <__swbuf_r+0x28>
 8005fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8005fe8:	e7ea      	b.n	8005fc0 <__swbuf_r+0x6c>
 8005fea:	bf00      	nop
 8005fec:	0800667c 	.word	0x0800667c
 8005ff0:	0800669c 	.word	0x0800669c
 8005ff4:	0800665c 	.word	0x0800665c

08005ff8 <_write_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d07      	ldr	r5, [pc, #28]	; (8006018 <_write_r+0x20>)
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	4608      	mov	r0, r1
 8006000:	4611      	mov	r1, r2
 8006002:	2200      	movs	r2, #0
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7ff f9fa 	bl	8005400 <_write>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_write_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_write_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200001e0 	.word	0x200001e0

0800601c <__swsetup_r>:
 800601c:	4b32      	ldr	r3, [pc, #200]	; (80060e8 <__swsetup_r+0xcc>)
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	b125      	cbz	r5, 8006032 <__swsetup_r+0x16>
 8006028:	69ab      	ldr	r3, [r5, #24]
 800602a:	b913      	cbnz	r3, 8006032 <__swsetup_r+0x16>
 800602c:	4628      	mov	r0, r5
 800602e:	f7ff fad3 	bl	80055d8 <__sinit>
 8006032:	4b2e      	ldr	r3, [pc, #184]	; (80060ec <__swsetup_r+0xd0>)
 8006034:	429c      	cmp	r4, r3
 8006036:	d10f      	bne.n	8006058 <__swsetup_r+0x3c>
 8006038:	686c      	ldr	r4, [r5, #4]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006040:	0719      	lsls	r1, r3, #28
 8006042:	d42c      	bmi.n	800609e <__swsetup_r+0x82>
 8006044:	06dd      	lsls	r5, r3, #27
 8006046:	d411      	bmi.n	800606c <__swsetup_r+0x50>
 8006048:	2309      	movs	r3, #9
 800604a:	6033      	str	r3, [r6, #0]
 800604c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	e03e      	b.n	80060d6 <__swsetup_r+0xba>
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <__swsetup_r+0xd4>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d101      	bne.n	8006062 <__swsetup_r+0x46>
 800605e:	68ac      	ldr	r4, [r5, #8]
 8006060:	e7eb      	b.n	800603a <__swsetup_r+0x1e>
 8006062:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <__swsetup_r+0xd8>)
 8006064:	429c      	cmp	r4, r3
 8006066:	bf08      	it	eq
 8006068:	68ec      	ldreq	r4, [r5, #12]
 800606a:	e7e6      	b.n	800603a <__swsetup_r+0x1e>
 800606c:	0758      	lsls	r0, r3, #29
 800606e:	d512      	bpl.n	8006096 <__swsetup_r+0x7a>
 8006070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006072:	b141      	cbz	r1, 8006086 <__swsetup_r+0x6a>
 8006074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006078:	4299      	cmp	r1, r3
 800607a:	d002      	beq.n	8006082 <__swsetup_r+0x66>
 800607c:	4630      	mov	r0, r6
 800607e:	f000 f991 	bl	80063a4 <_free_r>
 8006082:	2300      	movs	r3, #0
 8006084:	6363      	str	r3, [r4, #52]	; 0x34
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	2300      	movs	r3, #0
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	f043 0308 	orr.w	r3, r3, #8
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	b94b      	cbnz	r3, 80060b6 <__swsetup_r+0x9a>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ac:	d003      	beq.n	80060b6 <__swsetup_r+0x9a>
 80060ae:	4621      	mov	r1, r4
 80060b0:	4630      	mov	r0, r6
 80060b2:	f000 f92b 	bl	800630c <__smakebuf_r>
 80060b6:	89a0      	ldrh	r0, [r4, #12]
 80060b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060bc:	f010 0301 	ands.w	r3, r0, #1
 80060c0:	d00a      	beq.n	80060d8 <__swsetup_r+0xbc>
 80060c2:	2300      	movs	r3, #0
 80060c4:	60a3      	str	r3, [r4, #8]
 80060c6:	6963      	ldr	r3, [r4, #20]
 80060c8:	425b      	negs	r3, r3
 80060ca:	61a3      	str	r3, [r4, #24]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	b943      	cbnz	r3, 80060e2 <__swsetup_r+0xc6>
 80060d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060d4:	d1ba      	bne.n	800604c <__swsetup_r+0x30>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	0781      	lsls	r1, r0, #30
 80060da:	bf58      	it	pl
 80060dc:	6963      	ldrpl	r3, [r4, #20]
 80060de:	60a3      	str	r3, [r4, #8]
 80060e0:	e7f4      	b.n	80060cc <__swsetup_r+0xb0>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e7f7      	b.n	80060d6 <__swsetup_r+0xba>
 80060e6:	bf00      	nop
 80060e8:	20000078 	.word	0x20000078
 80060ec:	0800667c 	.word	0x0800667c
 80060f0:	0800669c 	.word	0x0800669c
 80060f4:	0800665c 	.word	0x0800665c

080060f8 <_close_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_close_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fa fdd9 	bl	8000cba <_close>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_close_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_close_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200001e0 	.word	0x200001e0

08006118 <__sflush_r>:
 8006118:	898a      	ldrh	r2, [r1, #12]
 800611a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611e:	4605      	mov	r5, r0
 8006120:	0710      	lsls	r0, r2, #28
 8006122:	460c      	mov	r4, r1
 8006124:	d458      	bmi.n	80061d8 <__sflush_r+0xc0>
 8006126:	684b      	ldr	r3, [r1, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	dc05      	bgt.n	8006138 <__sflush_r+0x20>
 800612c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	dc02      	bgt.n	8006138 <__sflush_r+0x20>
 8006132:	2000      	movs	r0, #0
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800613a:	2e00      	cmp	r6, #0
 800613c:	d0f9      	beq.n	8006132 <__sflush_r+0x1a>
 800613e:	2300      	movs	r3, #0
 8006140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006144:	682f      	ldr	r7, [r5, #0]
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	d032      	beq.n	80061b0 <__sflush_r+0x98>
 800614a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	075a      	lsls	r2, r3, #29
 8006150:	d505      	bpl.n	800615e <__sflush_r+0x46>
 8006152:	6863      	ldr	r3, [r4, #4]
 8006154:	1ac0      	subs	r0, r0, r3
 8006156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006158:	b10b      	cbz	r3, 800615e <__sflush_r+0x46>
 800615a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800615c:	1ac0      	subs	r0, r0, r3
 800615e:	2300      	movs	r3, #0
 8006160:	4602      	mov	r2, r0
 8006162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006164:	6a21      	ldr	r1, [r4, #32]
 8006166:	4628      	mov	r0, r5
 8006168:	47b0      	blx	r6
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	d106      	bne.n	800617e <__sflush_r+0x66>
 8006170:	6829      	ldr	r1, [r5, #0]
 8006172:	291d      	cmp	r1, #29
 8006174:	d82c      	bhi.n	80061d0 <__sflush_r+0xb8>
 8006176:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <__sflush_r+0x108>)
 8006178:	40ca      	lsrs	r2, r1
 800617a:	07d6      	lsls	r6, r2, #31
 800617c:	d528      	bpl.n	80061d0 <__sflush_r+0xb8>
 800617e:	2200      	movs	r2, #0
 8006180:	6062      	str	r2, [r4, #4]
 8006182:	04d9      	lsls	r1, r3, #19
 8006184:	6922      	ldr	r2, [r4, #16]
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	d504      	bpl.n	8006194 <__sflush_r+0x7c>
 800618a:	1c42      	adds	r2, r0, #1
 800618c:	d101      	bne.n	8006192 <__sflush_r+0x7a>
 800618e:	682b      	ldr	r3, [r5, #0]
 8006190:	b903      	cbnz	r3, 8006194 <__sflush_r+0x7c>
 8006192:	6560      	str	r0, [r4, #84]	; 0x54
 8006194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006196:	602f      	str	r7, [r5, #0]
 8006198:	2900      	cmp	r1, #0
 800619a:	d0ca      	beq.n	8006132 <__sflush_r+0x1a>
 800619c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061a0:	4299      	cmp	r1, r3
 80061a2:	d002      	beq.n	80061aa <__sflush_r+0x92>
 80061a4:	4628      	mov	r0, r5
 80061a6:	f000 f8fd 	bl	80063a4 <_free_r>
 80061aa:	2000      	movs	r0, #0
 80061ac:	6360      	str	r0, [r4, #52]	; 0x34
 80061ae:	e7c1      	b.n	8006134 <__sflush_r+0x1c>
 80061b0:	6a21      	ldr	r1, [r4, #32]
 80061b2:	2301      	movs	r3, #1
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b0      	blx	r6
 80061b8:	1c41      	adds	r1, r0, #1
 80061ba:	d1c7      	bne.n	800614c <__sflush_r+0x34>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0c4      	beq.n	800614c <__sflush_r+0x34>
 80061c2:	2b1d      	cmp	r3, #29
 80061c4:	d001      	beq.n	80061ca <__sflush_r+0xb2>
 80061c6:	2b16      	cmp	r3, #22
 80061c8:	d101      	bne.n	80061ce <__sflush_r+0xb6>
 80061ca:	602f      	str	r7, [r5, #0]
 80061cc:	e7b1      	b.n	8006132 <__sflush_r+0x1a>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	e7ad      	b.n	8006134 <__sflush_r+0x1c>
 80061d8:	690f      	ldr	r7, [r1, #16]
 80061da:	2f00      	cmp	r7, #0
 80061dc:	d0a9      	beq.n	8006132 <__sflush_r+0x1a>
 80061de:	0793      	lsls	r3, r2, #30
 80061e0:	680e      	ldr	r6, [r1, #0]
 80061e2:	bf08      	it	eq
 80061e4:	694b      	ldreq	r3, [r1, #20]
 80061e6:	600f      	str	r7, [r1, #0]
 80061e8:	bf18      	it	ne
 80061ea:	2300      	movne	r3, #0
 80061ec:	eba6 0807 	sub.w	r8, r6, r7
 80061f0:	608b      	str	r3, [r1, #8]
 80061f2:	f1b8 0f00 	cmp.w	r8, #0
 80061f6:	dd9c      	ble.n	8006132 <__sflush_r+0x1a>
 80061f8:	6a21      	ldr	r1, [r4, #32]
 80061fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061fc:	4643      	mov	r3, r8
 80061fe:	463a      	mov	r2, r7
 8006200:	4628      	mov	r0, r5
 8006202:	47b0      	blx	r6
 8006204:	2800      	cmp	r0, #0
 8006206:	dc06      	bgt.n	8006216 <__sflush_r+0xfe>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e78e      	b.n	8006134 <__sflush_r+0x1c>
 8006216:	4407      	add	r7, r0
 8006218:	eba8 0800 	sub.w	r8, r8, r0
 800621c:	e7e9      	b.n	80061f2 <__sflush_r+0xda>
 800621e:	bf00      	nop
 8006220:	20400001 	.word	0x20400001

08006224 <_fflush_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	690b      	ldr	r3, [r1, #16]
 8006228:	4605      	mov	r5, r0
 800622a:	460c      	mov	r4, r1
 800622c:	b913      	cbnz	r3, 8006234 <_fflush_r+0x10>
 800622e:	2500      	movs	r5, #0
 8006230:	4628      	mov	r0, r5
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	b118      	cbz	r0, 800623e <_fflush_r+0x1a>
 8006236:	6983      	ldr	r3, [r0, #24]
 8006238:	b90b      	cbnz	r3, 800623e <_fflush_r+0x1a>
 800623a:	f7ff f9cd 	bl	80055d8 <__sinit>
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <_fflush_r+0x6c>)
 8006240:	429c      	cmp	r4, r3
 8006242:	d11b      	bne.n	800627c <_fflush_r+0x58>
 8006244:	686c      	ldr	r4, [r5, #4]
 8006246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ef      	beq.n	800622e <_fflush_r+0xa>
 800624e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006250:	07d0      	lsls	r0, r2, #31
 8006252:	d404      	bmi.n	800625e <_fflush_r+0x3a>
 8006254:	0599      	lsls	r1, r3, #22
 8006256:	d402      	bmi.n	800625e <_fflush_r+0x3a>
 8006258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625a:	f7ff fa5b 	bl	8005714 <__retarget_lock_acquire_recursive>
 800625e:	4628      	mov	r0, r5
 8006260:	4621      	mov	r1, r4
 8006262:	f7ff ff59 	bl	8006118 <__sflush_r>
 8006266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006268:	07da      	lsls	r2, r3, #31
 800626a:	4605      	mov	r5, r0
 800626c:	d4e0      	bmi.n	8006230 <_fflush_r+0xc>
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	059b      	lsls	r3, r3, #22
 8006272:	d4dd      	bmi.n	8006230 <_fflush_r+0xc>
 8006274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006276:	f7ff fa4e 	bl	8005716 <__retarget_lock_release_recursive>
 800627a:	e7d9      	b.n	8006230 <_fflush_r+0xc>
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <_fflush_r+0x70>)
 800627e:	429c      	cmp	r4, r3
 8006280:	d101      	bne.n	8006286 <_fflush_r+0x62>
 8006282:	68ac      	ldr	r4, [r5, #8]
 8006284:	e7df      	b.n	8006246 <_fflush_r+0x22>
 8006286:	4b04      	ldr	r3, [pc, #16]	; (8006298 <_fflush_r+0x74>)
 8006288:	429c      	cmp	r4, r3
 800628a:	bf08      	it	eq
 800628c:	68ec      	ldreq	r4, [r5, #12]
 800628e:	e7da      	b.n	8006246 <_fflush_r+0x22>
 8006290:	0800667c 	.word	0x0800667c
 8006294:	0800669c 	.word	0x0800669c
 8006298:	0800665c 	.word	0x0800665c

0800629c <_lseek_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_lseek_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fa fd2c 	bl	8000d08 <_lseek>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_lseek_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_lseek_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200001e0 	.word	0x200001e0

080062c0 <__swhatbuf_r>:
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	460e      	mov	r6, r1
 80062c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c8:	2900      	cmp	r1, #0
 80062ca:	b096      	sub	sp, #88	; 0x58
 80062cc:	4614      	mov	r4, r2
 80062ce:	461d      	mov	r5, r3
 80062d0:	da08      	bge.n	80062e4 <__swhatbuf_r+0x24>
 80062d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	061a      	lsls	r2, r3, #24
 80062dc:	d410      	bmi.n	8006300 <__swhatbuf_r+0x40>
 80062de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e2:	e00e      	b.n	8006302 <__swhatbuf_r+0x42>
 80062e4:	466a      	mov	r2, sp
 80062e6:	f000 f8bb 	bl	8006460 <_fstat_r>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	dbf1      	blt.n	80062d2 <__swhatbuf_r+0x12>
 80062ee:	9a01      	ldr	r2, [sp, #4]
 80062f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062f8:	425a      	negs	r2, r3
 80062fa:	415a      	adcs	r2, r3
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	e7ee      	b.n	80062de <__swhatbuf_r+0x1e>
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	2000      	movs	r0, #0
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	b016      	add	sp, #88	; 0x58
 8006308:	bd70      	pop	{r4, r5, r6, pc}
	...

0800630c <__smakebuf_r>:
 800630c:	898b      	ldrh	r3, [r1, #12]
 800630e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006310:	079d      	lsls	r5, r3, #30
 8006312:	4606      	mov	r6, r0
 8006314:	460c      	mov	r4, r1
 8006316:	d507      	bpl.n	8006328 <__smakebuf_r+0x1c>
 8006318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	6123      	str	r3, [r4, #16]
 8006320:	2301      	movs	r3, #1
 8006322:	6163      	str	r3, [r4, #20]
 8006324:	b002      	add	sp, #8
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	ab01      	add	r3, sp, #4
 800632a:	466a      	mov	r2, sp
 800632c:	f7ff ffc8 	bl	80062c0 <__swhatbuf_r>
 8006330:	9900      	ldr	r1, [sp, #0]
 8006332:	4605      	mov	r5, r0
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff fa0f 	bl	8005758 <_malloc_r>
 800633a:	b948      	cbnz	r0, 8006350 <__smakebuf_r+0x44>
 800633c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006340:	059a      	lsls	r2, r3, #22
 8006342:	d4ef      	bmi.n	8006324 <__smakebuf_r+0x18>
 8006344:	f023 0303 	bic.w	r3, r3, #3
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	e7e3      	b.n	8006318 <__smakebuf_r+0xc>
 8006350:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <__smakebuf_r+0x7c>)
 8006352:	62b3      	str	r3, [r6, #40]	; 0x28
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	6020      	str	r0, [r4, #0]
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	9b00      	ldr	r3, [sp, #0]
 8006360:	6163      	str	r3, [r4, #20]
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	6120      	str	r0, [r4, #16]
 8006366:	b15b      	cbz	r3, 8006380 <__smakebuf_r+0x74>
 8006368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800636c:	4630      	mov	r0, r6
 800636e:	f000 f889 	bl	8006484 <_isatty_r>
 8006372:	b128      	cbz	r0, 8006380 <__smakebuf_r+0x74>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	89a0      	ldrh	r0, [r4, #12]
 8006382:	4305      	orrs	r5, r0
 8006384:	81a5      	strh	r5, [r4, #12]
 8006386:	e7cd      	b.n	8006324 <__smakebuf_r+0x18>
 8006388:	08005571 	.word	0x08005571

0800638c <__malloc_lock>:
 800638c:	4801      	ldr	r0, [pc, #4]	; (8006394 <__malloc_lock+0x8>)
 800638e:	f7ff b9c1 	b.w	8005714 <__retarget_lock_acquire_recursive>
 8006392:	bf00      	nop
 8006394:	200001d5 	.word	0x200001d5

08006398 <__malloc_unlock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_unlock+0x8>)
 800639a:	f7ff b9bc 	b.w	8005716 <__retarget_lock_release_recursive>
 800639e:	bf00      	nop
 80063a0:	200001d5 	.word	0x200001d5

080063a4 <_free_r>:
 80063a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d044      	beq.n	8006434 <_free_r+0x90>
 80063aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ae:	9001      	str	r0, [sp, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f1a1 0404 	sub.w	r4, r1, #4
 80063b6:	bfb8      	it	lt
 80063b8:	18e4      	addlt	r4, r4, r3
 80063ba:	f7ff ffe7 	bl	800638c <__malloc_lock>
 80063be:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <_free_r+0x94>)
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	b933      	cbnz	r3, 80063d4 <_free_r+0x30>
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	6014      	str	r4, [r2, #0]
 80063ca:	b003      	add	sp, #12
 80063cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063d0:	f7ff bfe2 	b.w	8006398 <__malloc_unlock>
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d908      	bls.n	80063ea <_free_r+0x46>
 80063d8:	6825      	ldr	r5, [r4, #0]
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	428b      	cmp	r3, r1
 80063de:	bf01      	itttt	eq
 80063e0:	6819      	ldreq	r1, [r3, #0]
 80063e2:	685b      	ldreq	r3, [r3, #4]
 80063e4:	1949      	addeq	r1, r1, r5
 80063e6:	6021      	streq	r1, [r4, #0]
 80063e8:	e7ed      	b.n	80063c6 <_free_r+0x22>
 80063ea:	461a      	mov	r2, r3
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	b10b      	cbz	r3, 80063f4 <_free_r+0x50>
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d9fa      	bls.n	80063ea <_free_r+0x46>
 80063f4:	6811      	ldr	r1, [r2, #0]
 80063f6:	1855      	adds	r5, r2, r1
 80063f8:	42a5      	cmp	r5, r4
 80063fa:	d10b      	bne.n	8006414 <_free_r+0x70>
 80063fc:	6824      	ldr	r4, [r4, #0]
 80063fe:	4421      	add	r1, r4
 8006400:	1854      	adds	r4, r2, r1
 8006402:	42a3      	cmp	r3, r4
 8006404:	6011      	str	r1, [r2, #0]
 8006406:	d1e0      	bne.n	80063ca <_free_r+0x26>
 8006408:	681c      	ldr	r4, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	6053      	str	r3, [r2, #4]
 800640e:	4421      	add	r1, r4
 8006410:	6011      	str	r1, [r2, #0]
 8006412:	e7da      	b.n	80063ca <_free_r+0x26>
 8006414:	d902      	bls.n	800641c <_free_r+0x78>
 8006416:	230c      	movs	r3, #12
 8006418:	6003      	str	r3, [r0, #0]
 800641a:	e7d6      	b.n	80063ca <_free_r+0x26>
 800641c:	6825      	ldr	r5, [r4, #0]
 800641e:	1961      	adds	r1, r4, r5
 8006420:	428b      	cmp	r3, r1
 8006422:	bf04      	itt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	bf04      	itt	eq
 800642c:	1949      	addeq	r1, r1, r5
 800642e:	6021      	streq	r1, [r4, #0]
 8006430:	6054      	str	r4, [r2, #4]
 8006432:	e7ca      	b.n	80063ca <_free_r+0x26>
 8006434:	b003      	add	sp, #12
 8006436:	bd30      	pop	{r4, r5, pc}
 8006438:	200001d8 	.word	0x200001d8

0800643c <_read_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_read_r+0x20>)
 8006440:	4604      	mov	r4, r0
 8006442:	4608      	mov	r0, r1
 8006444:	4611      	mov	r1, r2
 8006446:	2200      	movs	r2, #0
 8006448:	602a      	str	r2, [r5, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f7fa fc18 	bl	8000c80 <_read>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_read_r+0x1e>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	b103      	cbz	r3, 800645a <_read_r+0x1e>
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	200001e0 	.word	0x200001e0

08006460 <_fstat_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d07      	ldr	r5, [pc, #28]	; (8006480 <_fstat_r+0x20>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	f7fa fc30 	bl	8000cd2 <_fstat>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d102      	bne.n	800647c <_fstat_r+0x1c>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	b103      	cbz	r3, 800647c <_fstat_r+0x1c>
 800647a:	6023      	str	r3, [r4, #0]
 800647c:	bd38      	pop	{r3, r4, r5, pc}
 800647e:	bf00      	nop
 8006480:	200001e0 	.word	0x200001e0

08006484 <_isatty_r>:
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4d06      	ldr	r5, [pc, #24]	; (80064a0 <_isatty_r+0x1c>)
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	602b      	str	r3, [r5, #0]
 8006490:	f7fa fc2f 	bl	8000cf2 <_isatty>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_isatty_r+0x1a>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_isatty_r+0x1a>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	200001e0 	.word	0x200001e0

080064a4 <_init>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr

080064b0 <_fini>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr
